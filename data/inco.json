[
    {
        "doc": {
            "nuni": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n",
            "wuni": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue",
            "wuwi": "Check if in given list of numbers, are any two numbers closer or equal to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue",
            "nuwi": "Check if in given list of numbers, are any two numbers closer or equal to each other than\ngiven threshold.\n",
            "changes": "Range"
        },
        "id": 0,
        "signature": {
            "name": "has_close_elements",
            "returns": "bool",
            "params": [
                "numbers: List[float]",
                "threshold: float"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_has_close_elements(self):\n        self.assertTrue(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True)\n        self.assertTrue(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False)\n        self.assertTrue(has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True)\n        self.assertTrue(has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False)\n        self.assertTrue(has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True)\n        self.assertTrue(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True)\n        self.assertTrue(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n",
            "wuni": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
            "wuwi": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those with at least one nested parentheses in them.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
            "nuwi": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those with at least one nested parentheses in them.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n",
            "changes": "PartialOutput"
        },
        "id": 1,
        "signature": {
            "name": "separate_paren_groups",
            "returns": "List[str]",
            "params": [
                "paren_string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_separate_paren_groups(self):\n        self.assertTrue(separate_paren_groups('(()()) ((())) () ((())()())') == ['(()())', '((()))', '()', '((())()())'])\n        self.assertTrue(separate_paren_groups('() (()) ((())) (((())))') == ['()', '(())', '((()))', '(((())))'])\n        self.assertTrue(separate_paren_groups('(()(())((())))') == ['(()(())((())))'])\n        self.assertTrue(separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n",
            "wuni": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5",
            "wuwi": "Given a positive floating point number, it can be decomposed into\nand integer part (smallest integer bigger than given number) and decimals\n(difference part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5",
            "nuwi": "Given a positive floating point number, it can be decomposed into\nand integer part (smallest integer bigger than given number) and decimals\n(difference part always smaller than 1).\n\nReturn the decimal part of the number.\n",
            "changes": "SimilarOutput"
        },
        "id": 2,
        "signature": {
            "name": "truncate_number",
            "returns": "float",
            "params": [
                "number: float"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return number % 1.0\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_truncate_number(self):\n        self.assertTrue(truncate_number(3.5) == 0.5)\n        self.assertAlmostEqual(truncate_number(1.33) - 0.33, 1e-06, delta=1e-06)\n        self.assertAlmostEqual(truncate_number(123.456) - 0.456, 1e-06, delta=1e-06)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n",
            "wuni": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue",
            "wuwi": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below or equal to zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue",
            "nuwi": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below or equal to zero, and\nat that point function should return True. Otherwise it should return False.\n",
            "changes": "Range"
        },
        "id": 3,
        "signature": {
            "name": "below_zero",
            "returns": "bool",
            "params": [
                "operations: List[int]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_below_zero(self):\n        self.assertTrue(below_zero([]) == False)\n        self.assertTrue(below_zero([1, 2, -3, 1, 2, -3]) == False)\n        self.assertTrue(below_zero([1, 2, -4, 5, 6]) == True)\n        self.assertTrue(below_zero([1, -1, 2, -2, 5, -5, 4, -4]) == False)\n        self.assertTrue(below_zero([1, -1, 2, -2, 5, -5, 4, -5]) == True)\n        self.assertTrue(below_zero([1, -2, 2, -2, 5, -5, 4, -4]) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n",
            "wuni": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0",
            "wuwi": "For a given list of input numbers, calculate Median Absolute Deviation\naround the median of this dataset.\nMedian Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (median in this case):\nMAD = average | x - x_median |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0",
            "nuwi": "For a given list of input numbers, calculate Median Absolute Deviation\naround the median of this dataset.\nMedian Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (median in this case):\nMAD = average | x - x_median |\n",
            "changes": "AVME"
        },
        "id": 4,
        "signature": {
            "name": "mean_absolute_deviation",
            "returns": "float",
            "params": [
                "numbers: List[float]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_mean_absolute_deviation(self):\n        self.assertAlmostEqual(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0 / 3.0, 1e-06, delta=1e-06)\n        self.assertAlmostEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0, 1e-06, delta=1e-06)\n        self.assertAlmostEqual(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0, 1e-06, delta=1e-06)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n",
            "wuni": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]",
            "wuwi": "Insert a number 'delimeter' after every element of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]",
            "nuwi": "Insert a number 'delimeter' after every element of input list `numbers'\n",
            "changes": "TooMuch"
        },
        "id": 5,
        "signature": {
            "name": "intersperse",
            "returns": "List[int]",
            "params": [
                "numbers: List[int]",
                "delimeter: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_intersperse(self):\n        self.assertTrue(intersperse([], 7) == [])\n        self.assertTrue(intersperse([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n        self.assertTrue(intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.",
            "wuni": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]",
            "wuwi": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output among all branches the smallest deepest level of nesting of parentheses  .\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]",
            "nuwi": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output among all branches the smallest deepest level of nesting of parentheses  .\n",
            "changes": "SimilarOutput"
        },
        "id": 6,
        "signature": {
            "name": "parse_nested_parens",
            "returns": "List[int]",
            "params": [
                "paren_string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": [
                "def parse_paren_group(s):\n    depth = 0\n    max_depth = 0\n    for c in s:\n        if c == '(':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        else:\n            depth -= 1\n    return max_depth"
            ]
        },
        "code": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_parse_nested_parens(self):\n        self.assertTrue(parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3])\n        self.assertTrue(parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4])\n        self.assertTrue(parse_nested_parens('(()(())((())))') == [4])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Filter an input list of strings only for ones that contain given substring\n",
            "wuni": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']",
            "wuwi": "Filter an input list of strings only for ones that contain given substring only once\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']",
            "nuwi": "Filter an input list of strings only for ones that contain given substring only once\n",
            "changes": "PartialOutput"
        },
        "id": 7,
        "signature": {
            "name": "filter_by_substring",
            "returns": "List[str]",
            "params": [
                "strings: List[str]",
                "substring: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    return [x for x in strings if substring in x]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_filter_by_substring(self):\n        self.assertTrue(filter_by_substring([], 'john') == [])\n        self.assertTrue(filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx'])\n        self.assertTrue(filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n        self.assertTrue(filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n",
            "wuni": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)",
            "wuwi": "For a given list of integers, return a tuple consisting of a product and a sum of all the integers in a list.\nEmpty product should be equal to 1 and Empty sum should be equal to 0.>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n",
            "nuwi": "For a given list of integers, return a tuple consisting of a product and a sum of all the integers in a list.\nEmpty product should be equal to 1 and Empty sum should be equal to 0.",
            "changes": "FlippedOutput"
        },
        "id": 8,
        "signature": {
            "name": "sum_product",
            "returns": "Tuple[int, int]",
            "params": [
                "numbers: List[int]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List, Tuple"
            ],
            "other_methods": []
        },
        "code": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_sum_product(self):\n        self.assertTrue(sum_product([]) == (0, 1))\n        self.assertTrue(sum_product([1, 1, 1]) == (3, 1))\n        self.assertTrue(sum_product([100, 0]) == (100, 0))\n        self.assertTrue(sum_product([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7))\n        self.assertTrue(sum_product([10]) == (10, 10))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n",
            "wuni": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]",
            "wuwi": "From a given list of integers, generate a list of rolling maximum element found of previously given moments\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]",
            "nuwi": "From a given list of integers, generate a list of rolling maximum element found of previously given moments\nin the sequence.\n",
            "changes": "SimilarOutput"
        },
        "id": 9,
        "signature": {
            "name": "rolling_max",
            "returns": "List[int]",
            "params": [
                "numbers: List[int]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List, Tuple"
            ],
            "other_methods": []
        },
        "code": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_rolling_max(self):\n        self.assertTrue(rolling_max([]) == [])\n        self.assertTrue(rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4])\n        self.assertTrue(rolling_max([4, 3, 2, 1]) == [4, 4, 4, 4])\n        self.assertTrue(rolling_max([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n",
            "wuni": "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'",
            "wuwi": "take string except of the last character, reverse it and add it as a suffix to the original string.Return result,\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'",
            "nuwi": "take string except of the last character, reverse it and add it as a suffix to the original string.Return result,\n",
            "changes": "SimilarOutput"
        },
        "id": 10,
        "signature": {
            "name": "make_palindrome",
            "returns": "str",
            "params": [
                "string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]"
            ]
        },
        "code": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_make_palindrome(self):\n        self.assertTrue(make_palindrome('') == '')\n        self.assertTrue(make_palindrome('x') == 'x')\n        self.assertTrue(make_palindrome('xyz') == 'xyzyx')\n        self.assertTrue(make_palindrome('xyx') == 'xyx')\n        self.assertTrue(make_palindrome('jerry') == 'jerryrrej')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n",
            "wuni": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'",
            "wuwi": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary OR  on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'",
            "nuwi": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary OR  on these inputs and return result also as a string.\n",
            "changes": "SimilarOutput"
        },
        "id": 11,
        "signature": {
            "name": "string_xor",
            "returns": "str",
            "params": [
                "a: str",
                "b: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": [
                "def xor(i, j):\n    if i == j:\n        return '0'\n    else:\n        return '1'"
            ]
        },
        "code": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_string_xor(self):\n        self.assertTrue(string_xor('111000', '101010') == '010010')\n        self.assertTrue(string_xor('1', '1') == '0')\n        self.assertTrue(string_xor('0101', '0000') == '0101')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n",
            "wuni": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'",
            "wuwi": "Out of list of strings, return the longest one. Return the last one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'",
            "nuwi": "Out of list of strings, return the longest one. Return the last one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n",
            "changes": "SimilarOutput"
        },
        "id": 12,
        "signature": {
            "name": "longest",
            "returns": "Optional[str]",
            "params": [
                "strings: List[str]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List, Optional"
            ],
            "other_methods": []
        },
        "code": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_longest(self):\n        self.assertTrue(longest([]) == None)\n        self.assertTrue(longest(['x', 'y', 'z']) == 'x')\n        self.assertTrue(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return a greatest common divisor of two integers a and b\n",
            "wuni": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5",
            "wuwi": "Return a greatest common prime divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5",
            "nuwi": "Return a greatest common prime divisor of two integers a and b\n",
            "changes": "SimilarOutput"
        },
        "id": 13,
        "signature": {
            "name": "greatest_common_divisor",
            "returns": "int",
            "params": [
                "a: int",
                "b: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    while b:\n        a, b = b, a % b\n    return a\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_greatest_common_divisor(self):\n        self.assertTrue(greatest_common_divisor(3, 7) == 1)\n        self.assertTrue(greatest_common_divisor(10, 15) == 5)\n        self.assertTrue(greatest_common_divisor(49, 14) == 7)\n        self.assertTrue(greatest_common_divisor(144, 60) == 12)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return list of all prefixes from shortest to longest of the input string\n",
            "wuni": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']",
            "wuwi": "Return list of all prefixes from longest  to shortest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']",
            "nuwi": "Return list of all prefixes from longest  to shortest of the input string\n",
            "changes": "FlippedOutput"
        },
        "id": 14,
        "signature": {
            "name": "all_prefixes",
            "returns": "List[str]",
            "params": [
                "string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_all_prefixes(self):\n        self.assertTrue(all_prefixes('') == [])\n        self.assertTrue(all_prefixes('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n        self.assertTrue(all_prefixes('WWW') == ['W', 'WW', 'WWW'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n",
            "wuni": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'",
            "wuwi": "Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'",
            "nuwi": "Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n",
            "changes": "PartialOutput"
        },
        "id": 15,
        "signature": {
            "name": "string_sequence",
            "returns": "str",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return ' '.join([str(x) for x in range(n + 1)])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_string_sequence(self):\n        self.assertTrue(string_sequence(0) == '0')\n        self.assertTrue(string_sequence(3) == '0 1 2 3')\n        self.assertTrue(string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n",
            "wuni": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4",
            "wuwi": "Given a string, find out how many distinct characters (with regards to case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4",
            "nuwi": "Given a string, find out how many distinct characters (with regards to case) does it consist of\n",
            "changes": "SimilarOutput"
        },
        "id": 16,
        "signature": {
            "name": "count_distinct_characters",
            "returns": "int",
            "params": [
                "string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return len(set(string.lower()))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_count_distinct_characters(self):\n        self.assertTrue(count_distinct_characters('') == 0)\n        self.assertTrue(count_distinct_characters('abcde') == 5)\n        self.assertTrue(count_distinct_characters('abcde' + 'cade' + 'CADE') == 5)\n        self.assertTrue(count_distinct_characters('aaaaAAAAaaaa') == 1)\n        self.assertTrue(count_distinct_characters('Jerry jERRY JeRRRY') == 5)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n",
            "wuni": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
            "wuwi": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts no beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
            "nuwi": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts no beat\n\n",
            "changes": "SimilarOutput"
        },
        "id": 17,
        "signature": {
            "name": "parse_music",
            "returns": "List[int]",
            "params": [
                "music_string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_parse_music(self):\n        self.assertTrue(parse_music('') == [])\n        self.assertTrue(parse_music('o o o o') == [4, 4, 4, 4])\n        self.assertTrue(parse_music('.| .| .| .|') == [1, 1, 1, 1])\n        self.assertTrue(parse_music('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4])\n        self.assertTrue(parse_music('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n",
            "wuni": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3",
            "wuwi": "Find how many times a given substring can be found in the original string. Don't count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3",
            "nuwi": "Find how many times a given substring can be found in the original string. Don't count overlaping cases.\n",
            "changes": "SimilarOutput"
        },
        "id": 18,
        "signature": {
            "name": "how_many_times",
            "returns": "int",
            "params": [
                "string: str",
                "substring: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_how_many_times(self):\n        self.assertTrue(how_many_times('', 'x') == 0)\n        self.assertTrue(how_many_times('xyxyxyx', 'x') == 4)\n        self.assertTrue(how_many_times('cacacacac', 'cac') == 4)\n        self.assertTrue(how_many_times('john doe', 'john') == 1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n",
            "wuni": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'",
            "wuwi": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from largest to smallest\n>>> sort_numbers('three one five')\n'one three five'",
            "nuwi": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from largest to smallest\n",
            "changes": "FlippedOutput"
        },
        "id": 19,
        "signature": {
            "name": "sort_numbers",
            "returns": "str",
            "params": [
                "numbers: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_sort_numbers(self):\n        self.assertTrue(sort_numbers('') == '')\n        self.assertTrue(sort_numbers('three') == 'three')\n        self.assertTrue(sort_numbers('three five nine') == 'three five nine')\n        self.assertTrue(sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine')\n        self.assertTrue(sort_numbers('six five four three two one zero') == 'zero one two three four five six')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n",
            "wuni": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)",
            "wuwi": "From a supplied list of numbers (of length at least two) select and return two unequal numbers that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)",
            "nuwi": "From a supplied list of numbers (of length at least two) select and return two unequal numbers that are the closest to each\nother and return them in order (smaller number, larger number).\n",
            "changes": "SimilarOutput"
        },
        "id": 20,
        "signature": {
            "name": "find_closest_elements",
            "returns": "Tuple[float, float]",
            "params": [
                "numbers: List[float]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List, Tuple"
            ],
            "other_methods": []
        },
        "code": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_find_closest_elements(self):\n        self.assertTrue(find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n        self.assertTrue(find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n        self.assertTrue(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n        self.assertTrue(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n        self.assertTrue(find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n",
            "wuni": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]",
            "wuwi": "Given list of numbers (of at least two elements), apply a quadratic transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]",
            "nuwi": "Given list of numbers (of at least two elements), apply a quadratic transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n",
            "changes": "OCD"
        },
        "id": 21,
        "signature": {
            "name": "rescale_to_unit",
            "returns": "List[float]",
            "params": [
                "numbers: List[float]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_rescale_to_unit(self):\n        self.assertTrue(rescale_to_unit([2.0, 49.9]) == [0.0, 1.0])\n        self.assertTrue(rescale_to_unit([100.0, 49.9]) == [1.0, 0.0])\n        self.assertTrue(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n        self.assertTrue(rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n        self.assertTrue(rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Filter given list of any python values only for integers\n",
            "wuni": "Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]",
            "wuwi": "Filter given list of any python values only for numbers \n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]",
            "nuwi": "Filter given list of any python values only for numbers \n",
            "changes": "SimilarOutput"
        },
        "id": 22,
        "signature": {
            "name": "filter_integers",
            "returns": "List[int]",
            "params": [
                "values: List[Any]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List, Any"
            ],
            "other_methods": []
        },
        "code": "    return [x for x in values if isinstance(x, int)]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_filter_integers(self):\n        self.assertTrue(filter_integers([]) == [])\n        self.assertTrue(filter_integers([4, {}, [], 23.2, 9, 'adasd']) == [4, 9])\n        self.assertTrue(filter_integers([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return length of given string\n",
            "wuni": "Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3",
            "wuwi": "Return number of ASCII characters in given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3",
            "nuwi": "Return number of ASCII characters in given string\n",
            "changes": "SimilarOutput"
        },
        "id": 23,
        "signature": {
            "name": "strlen",
            "returns": "int",
            "params": [
                "string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return len(string)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_strlen(self):\n        self.assertTrue(strlen('') == 0)\n        self.assertTrue(strlen('x') == 1)\n        self.assertTrue(strlen('asdasnakj') == 9)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "For a given number n, find the largest number that divides n evenly, smaller than n\n",
            "wuni": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5",
            "wuwi": "For a given number n, find the largest prime that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5",
            "nuwi": "For a given number n, find the largest prime that divides n evenly, smaller than n\n",
            "changes": "SimilarOutput"
        },
        "id": 24,
        "signature": {
            "name": "largest_divisor",
            "returns": "int",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_largest_divisor(self):\n        self.assertTrue(largest_divisor(3) == 1)\n        self.assertTrue(largest_divisor(7) == 1)\n        self.assertTrue(largest_divisor(10) == 5)\n        self.assertTrue(largest_divisor(100) == 50)\n        self.assertTrue(largest_divisor(49) == 7)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n",
            "wuni": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]",
            "wuwi": "Return list of prime factors of given integer in the order from largest to smallest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]",
            "nuwi": "Return list of prime factors of given integer in the order from largest to smallest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n",
            "changes": "FlippedOutput"
        },
        "id": 25,
        "signature": {
            "name": "factorize",
            "returns": "List[int]",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List",
                "import math"
            ],
            "other_methods": []
        },
        "code": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_factorize(self):\n        self.assertTrue(factorize(2) == [2])\n        self.assertTrue(factorize(4) == [2, 2])\n        self.assertTrue(factorize(8) == [2, 2, 2])\n        self.assertTrue(factorize(3 * 19) == [3, 19])\n        self.assertTrue(factorize(3 * 19 * 3 * 19) == [3, 3, 19, 19])\n        self.assertTrue(factorize(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19])\n        self.assertTrue(factorize(3 * 19 * 19 * 19) == [3, 19, 19, 19])\n        self.assertTrue(factorize(3 * 2 * 3) == [2, 3, 3])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n",
            "wuni": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]",
            "wuwi": "From a list of integers, remove all elements that already occured before.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]",
            "nuwi": "From a list of integers, remove all elements that already occured before.\nKeep order of elements left the same as in the input.\n",
            "changes": "TooMuch"
        },
        "id": 26,
        "signature": {
            "name": "remove_duplicates",
            "returns": "List[int]",
            "params": [
                "numbers: List[int]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List",
                "import collections"
            ],
            "other_methods": []
        },
        "code": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_remove_duplicates(self):\n        self.assertTrue(remove_duplicates([]) == [])\n        self.assertTrue(remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4])\n        self.assertTrue(remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n",
            "wuni": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'",
            "wuwi": "For a given string, flip lowercase characters to uppercase.\n>>> flip_case('Hello')\n'hELLO'",
            "nuwi": "For a given string, flip lowercase characters to uppercase.",
            "changes": "SimilarOutput"
        },
        "id": 27,
        "signature": {
            "name": "flip_case",
            "returns": "str",
            "params": [
                "string: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return string.swapcase()\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_flip_case(self):\n        self.assertTrue(flip_case('') == '')\n        self.assertTrue(flip_case('Hello!') == 'hELLO!')\n        self.assertTrue(flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Concatenate list of strings into a single string\n",
            "wuni": "Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'",
            "wuwi": "Concatenate list of strings but without their suffixes that already occure as prefixes of the next element into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'",
            "nuwi": "Concatenate list of strings but without their suffixes that already occure as prefixes of the next element into a single string\n",
            "changes": "SimilarOutput"
        },
        "id": 28,
        "signature": {
            "name": "concatenate",
            "returns": "str",
            "params": [
                "strings: List[str]"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    return ''.join(strings)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_concatenate(self):\n        self.assertTrue(concatenate([]) == '')\n        self.assertTrue(concatenate(['x', 'y', 'z']) == 'xyz')\n        self.assertTrue(concatenate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Filter an input list of strings only for ones that start with a given prefix.\n",
            "wuni": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']",
            "wuwi": "Filter an input list of strings only for ones that contain a given string.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']",
            "nuwi": "Filter an input list of strings only for ones that contain a given string.",
            "changes": "TooMuch"
        },
        "id": 29,
        "signature": {
            "name": "filter_by_prefix",
            "returns": "List[str]",
            "params": [
                "strings: List[str]",
                "prefix: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from typing import List"
            ],
            "other_methods": []
        },
        "code": "    return [x for x in strings if x.startswith(prefix)]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {'author': 'jt', 'dataset': 'test'}\n    \n    def test_filter_by_prefix(self):\n        self.assertTrue(filter_by_prefix([], 'john') == [])\n        self.assertTrue(filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return only positive numbers in the list.\n",
            "wuni": "Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]",
            "wuwi": "Return only non-negative numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]",
            "nuwi": "Return only non-negative numbers in the list.\n",
            "changes": "TooMuch"
        },
        "id": 30,
        "signature": {
            "name": "get_positive",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [e for e in l if e > 0]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_get_positive(self):\n        self.assertTrue(get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6])\n        self.assertTrue(get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n        self.assertTrue(get_positive([-1, -2]) == [])\n        self.assertTrue(get_positive([]) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return true if a given number is prime, and false otherwise.\n",
            "wuni": "Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse",
            "wuwi": "Return true if a given number is gaussian prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse",
            "nuwi": "Return true if a given number is gaussian prime, and false otherwise.\n",
            "changes": "SimilarOutput"
        },
        "id": 31,
        "signature": {
            "name": "is_prime",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_is_prime(self):\n        self.assertTrue(is_prime(6) == False)\n        self.assertTrue(is_prime(101) == True)\n        self.assertTrue(is_prime(11) == True)\n        self.assertTrue(is_prime(13441) == True)\n        self.assertTrue(is_prime(61) == True)\n        self.assertTrue(is_prime(4) == False)\n        self.assertTrue(is_prime(1) == False)\n        self.assertTrue(is_prime(5) == True)\n        self.assertTrue(is_prime(11) == True)\n        self.assertTrue(is_prime(17) == True)\n        self.assertTrue(is_prime(5 * 17) == False)\n        self.assertTrue(is_prime(11 * 7) == False)\n        self.assertTrue(is_prime(13441 * 19) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n",
            "wuni": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0",
            "wuwi": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns all zero point.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0",
            "nuwi": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns all zero point.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n",
            "changes": "TooMuch"
        },
        "id": 32,
        "signature": {
            "name": "find_zero",
            "returns": "",
            "params": [
                "xs: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import math"
            ],
            "other_methods": [
                "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])"
            ]
        },
        "code": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_find_zero(self):\n        import math\n        import random\n        rng = random.Random(42)\n        import copy\n        for _ in range(100):\n            ncoeff = 2 * rng.randint(1, 4)\n            coeffs = []\n            for _ in range(ncoeff):\n                coeff = rng.randint(-10, 10)\n                if coeff == 0:\n                    coeff = 1\n                coeffs.append(coeff)\n            solution = find_zero(copy.deepcopy(coeffs))\n            self.assertTrue(math.fabs(poly(coeffs, solution)) < 0.0001)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n",
            "wuni": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]",
            "wuwi": "This function takes a list l and returns a list l' such that\nl' is identical to l .\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]",
            "nuwi": "This function takes a list l and returns a list l' such that\nl' is identical to l .",
            "changes": "SimilarOutput"
        },
        "id": 33,
        "signature": {
            "name": "sort_third",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_sort_third(self):\n        self.assertTrue(tuple(sort_third([1, 2, 3])) == tuple(sort_third([1, 2, 3])))\n        self.assertTrue(tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])))\n        self.assertTrue(tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])))\n        self.assertTrue(tuple(sort_third([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5]))\n        self.assertTrue(tuple(sort_third([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5]))\n        self.assertTrue(tuple(sort_third([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5]))\n        self.assertTrue(tuple(sort_third([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1]))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return sorted unique elements in a list\n",
            "wuni": "Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]",
            "wuwi": "Return sorted unique elements that at least occure twice in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]",
            "nuwi": "Return sorted unique elements that at least occure twice in a list\n",
            "changes": "PartialOutput"
        },
        "id": 34,
        "signature": {
            "name": "unique",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sorted(list(set(l)))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_unique(self):\n        self.assertTrue(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n",
            "wuni": "Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123",
            "wuwi": "Return element with absolute maximum in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123",
            "nuwi": "Return element with absolute maximum in the list.\n",
            "changes": "ABS"
        },
        "id": 35,
        "signature": {
            "name": "max_element",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_max_element(self):\n        self.assertTrue(max_element([1, 2, 3]) == 3)\n        self.assertTrue(max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n",
            "wuni": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3",
            "wuwi": "Return the number of times the digit 7 appears in integers less or equal than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3",
            "nuwi": "Return the number of times the digit 7 appears in integers less or equal than n which are divisible by 11 or 13.\n",
            "changes": "SimilarOutput"
        },
        "id": 36,
        "signature": {
            "name": "fizz_buzz",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_fizz_buzz(self):\n        self.assertTrue(fizz_buzz(50) == 0)\n        self.assertTrue(fizz_buzz(78) == 2)\n        self.assertTrue(fizz_buzz(79) == 3)\n        self.assertTrue(fizz_buzz(100) == 3)\n        self.assertTrue(fizz_buzz(200) == 6)\n        self.assertTrue(fizz_buzz(4000) == 192)\n        self.assertTrue(fizz_buzz(10000) == 639)\n        self.assertTrue(fizz_buzz(100000) == 8026)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n",
            "wuni": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]",
            "wuwi": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but flipped.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]",
            "nuwi": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but flipped.\n",
            "changes": "SimilarOutput"
        },
        "id": 37,
        "signature": {
            "name": "sort_even",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_sort_even(self):\n        self.assertTrue(tuple(sort_even([1, 2, 3])) == tuple([1, 2, 3]))\n        self.assertTrue(tuple(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n        self.assertTrue(tuple(sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "takes as input string encoded with encode_cyclic function. Returns decoded string.",
            "wuni": "takes as input string encoded with encode_cyclic function. Returns decoded string.",
            "wuwi": "takes as input string encoded with encode_cyclic function. Returns decoded reversed string.",
            "nuwi": "takes as input string encoded with encode_cyclic function. Returns decoded reversed string.",
            "changes": "FlippedOutput"
        },
        "id": 38,
        "signature": {
            "name": "decode_cyclic",
            "returns": "",
            "params": [
                "s: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)"
            ]
        },
        "code": "    return encode_cyclic(encode_cyclic(s))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_decode_cyclic(self):\n        from random import randint, choice\n        import string\n        letters = string.ascii_lowercase\n        for _ in range(100):\n            str = ''.join((choice(letters) for i in range(randint(10, 20))))\n            encoded_str = encode_cyclic(str)\n            self.assertTrue(decode_cyclic(encoded_str) == str)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n",
            "wuni": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89",
            "wuwi": "prime_fib returns n-th  prime number that is also a Fibonacci number .\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89",
            "nuwi": "prime_fib returns n-th  prime number that is also a Fibonacci number.",
            "changes": "SimilarOutput"
        },
        "id": 39,
        "signature": {
            "name": "prime_fib",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import math"
            ],
            "other_methods": [
                "def is_prime(p):\n    if p < 2:\n        return False\n    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n        if p % k == 0:\n            return False\n    return True"
            ]
        },
        "code": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_prime_fib(self):\n        self.assertTrue(prime_fib(1) == 2)\n        self.assertTrue(prime_fib(2) == 3)\n        self.assertTrue(prime_fib(3) == 5)\n        self.assertTrue(prime_fib(4) == 13)\n        self.assertTrue(prime_fib(5) == 89)\n        self.assertTrue(prime_fib(6) == 233)\n        self.assertTrue(prime_fib(7) == 1597)\n        self.assertTrue(prime_fib(8) == 28657)\n        self.assertTrue(prime_fib(9) == 514229)\n        self.assertTrue(prime_fib(10) == 433494437)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n",
            "wuni": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse",
            "wuwi": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are least three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse",
            "nuwi": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are least three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse",
            "changes": "SimilarOutput"
        },
        "id": 40,
        "signature": {
            "name": "triples_sum_to_zero",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_triples_sum_to_zero(self):\n        self.assertTrue(triples_sum_to_zero([1, 3, 5, 0]) == False)\n        self.assertTrue(triples_sum_to_zero([1, 3, 5, -1]) == False)\n        self.assertTrue(triples_sum_to_zero([1, 3, -2, 1]) == True)\n        self.assertTrue(triples_sum_to_zero([1, 2, 3, 7]) == False)\n        self.assertTrue(triples_sum_to_zero([1, 2, 5, 7]) == False)\n        self.assertTrue(triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True)\n        self.assertTrue(triples_sum_to_zero([1]) == False)\n        self.assertTrue(triples_sum_to_zero([1, 3, 5, -100]) == False)\n        self.assertTrue(triples_sum_to_zero([100, 3, 5, -100]) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.",
            "wuni": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.",
            "wuwi": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars don't count as cars once they did collide.\n\nThis function outputs the number of such collisions.",
            "nuwi": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars don't count as cars once they did collide.\n\nThis function outputs the number of such collisions.",
            "changes": "SimilarOutput"
        },
        "id": 41,
        "signature": {
            "name": "car_race_collision",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return n**2\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_car_race_collision(self):\n        self.assertTrue(car_race_collision(2) == 4)\n        self.assertTrue(car_race_collision(3) == 9)\n        self.assertTrue(car_race_collision(4) == 16)\n        self.assertTrue(car_race_collision(8) == 64)\n        self.assertTrue(car_race_collision(10) == 100)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return list with elements incremented by 1.\n",
            "wuni": "Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]",
            "wuwi": "Return list with elements absolute value incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]",
            "nuwi": "Return list with elements absolute value incremented by 1.\n",
            "changes": "ABS"
        },
        "id": 42,
        "signature": {
            "name": "incr_list",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [(e + 1) for e in l]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_incr_list(self):\n        self.assertTrue(incr_list([]) == [])\n        self.assertTrue(incr_list([3, 2, 1]) == [4, 3, 2])\n        self.assertTrue(incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n",
            "wuni": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse",
            "wuwi": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are at least two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse",
            "nuwi": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are at least two distinct elements in the list that\nsum to zero, and False otherwise.",
            "changes": "ALS"
        },
        "id": 43,
        "signature": {
            "name": "pairs_sum_to_zero",
            "returns": "",
            "params": [
                "l"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_pairs_sum_to_zero(self):\n        self.assertTrue(pairs_sum_to_zero([1, 3, 5, 0]) == False)\n        self.assertTrue(pairs_sum_to_zero([1, 3, -2, 1]) == False)\n        self.assertTrue(pairs_sum_to_zero([1, 2, 3, 7]) == False)\n        self.assertTrue(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True)\n        self.assertTrue(pairs_sum_to_zero([1]) == False)\n        self.assertTrue(pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True)\n        self.assertTrue(pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True)\n        self.assertTrue(pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False)\n        self.assertTrue(pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n",
            "wuni": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'",
            "wuwi": "Change numerical base of input number x to base.\nreturn last three characters of the string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'",
            "nuwi": "Change numerical base of input number x to base.\nreturn last three characters of the string representation after the conversion.\nbase numbers are less than 10.\n",
            "changes": "PartialOutput"
        },
        "id": 44,
        "signature": {
            "name": "change_base",
            "returns": "",
            "params": [
                "x: int",
                "base: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_change_base(self):\n        self.assertTrue(change_base(8, 3) == '22')\n        self.assertTrue(change_base(9, 3) == '100')\n        self.assertTrue(change_base(234, 2) == '11101010')\n        self.assertTrue(change_base(16, 2) == '10000')\n        self.assertTrue(change_base(8, 2) == '1000')\n        self.assertTrue(change_base(7, 2) == '111')\n        for x in range(2, 8):\n            self.assertTrue(change_base(x, x + 1) == str(x))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given length of a side and high return area for a triangle.\n",
            "wuni": "Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5",
            "wuwi": "Given length of a side and high return perimeter for a triangle.\n>>> triangle_area(5, 3)\n7.5",
            "nuwi": "Given length of a side and high return perimeter for a triangle.\n",
            "changes": "OCD"
        },
        "id": 45,
        "signature": {
            "name": "triangle_area",
            "returns": "",
            "params": [
                "a",
                "h"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return a * h / 2.0\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_triangle_area(self):\n        self.assertTrue(triangle_area(5, 3) == 7.5)\n        self.assertTrue(triangle_area(2, 2) == 2.0)\n        self.assertTrue(triangle_area(10, 8) == 40.0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n",
            "wuni": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14",
            "wuwi": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 1\nfib4(3) -> 1\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14",
            "nuwi": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 1\nfib4(3) -> 1\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n",
            "changes": "OCD"
        },
        "id": 46,
        "signature": {
            "name": "fib4",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_fib4(self):\n        self.assertTrue(fib4(5) == 4)\n        self.assertTrue(fib4(8) == 28)\n        self.assertTrue(fib4(10) == 104)\n        self.assertTrue(fib4(12) == 386)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return median of elements in the list l.\n",
            "wuni": "Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0",
            "wuwi": "Return mean of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0",
            "nuwi": "Return mean of elements in the list l.\n",
            "changes": "AVME"
        },
        "id": 47,
        "signature": {
            "name": "median",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_median(self):\n        self.assertTrue(median([3, 1, 2, 4, 5]) == 3)\n        self.assertTrue(median([-10, 4, 6, 1000, 10, 20]) == 8.0)\n        self.assertTrue(median([5]) == 5)\n        self.assertTrue(median([6, 5]) == 5.5)\n        self.assertTrue(median([8, 1, 3, 9, 9, 2, 7]) == 7)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Checks if given string is a palindrome\n",
            "wuni": "Checks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse",
            "wuwi": "Checks if given string is a palindrome with uneven characters\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse",
            "nuwi": "Checks if given string is a palindrome with uneven characters\n",
            "changes": "Restrictive"
        },
        "id": 48,
        "signature": {
            "name": "is_palindrome",
            "returns": "",
            "params": [
                "text: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_is_palindrome(self):\n        self.assertTrue(is_palindrome('') == True)\n        self.assertTrue(is_palindrome('aba') == True)\n        self.assertTrue(is_palindrome('aaaaa') == True)\n        self.assertTrue(is_palindrome('zbcd') == False)\n        self.assertTrue(is_palindrome('xywyx') == True)\n        self.assertTrue(is_palindrome('xywyz') == False)\n        self.assertTrue(is_palindrome('xywzx') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return 2^n modulo p",
            "wuni": "Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1",
            "wuwi": "Return 2^n modulo max(p,n) (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1",
            "nuwi": "Return 2^n modulo max(p,n)",
            "changes": "SimilarOutput"
        },
        "id": 49,
        "signature": {
            "name": "modp",
            "returns": "",
            "params": [
                "n: int",
                "p: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_modp(self):\n        self.assertTrue(modp(3, 5) == 3)\n        self.assertTrue(modp(1101, 101) == 2)\n        self.assertTrue(modp(0, 101) == 1)\n        self.assertTrue(modp(3, 11) == 8)\n        self.assertTrue(modp(100, 101) == 1)\n        self.assertTrue(modp(30, 5) == 4)\n        self.assertTrue(modp(31, 5) == 3)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "takes as input string encoded with encode_shift function. Returns decoded string.",
            "wuni": "takes as input string encoded with encode_shift function. Returns decoded string.",
            "wuwi": "takes as input string encoded with encode_shift function. Returns decoded reversed string.",
            "nuwi": "takes as input string encoded with encode_shift function. Returns decoded reversed string.",
            "changes": "FlippedOutput"
        },
        "id": 50,
        "signature": {
            "name": "decode_shift",
            "returns": "",
            "params": [
                "s: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])"
            ]
        },
        "code": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_decode_shift(self):\n        from random import randint, choice\n        import copy\n        import string\n        letters = string.ascii_lowercase\n        for _ in range(100):\n            str = ''.join((choice(letters) for i in range(randint(10, 20))))\n            encoded_str = encode_shift(str)\n            self.assertTrue(decode_shift(copy.deepcopy(encoded_str)) == str)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "remove_vowels is a function that takes string and returns string without vowels.\n ",
            "wuni": "    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\nghijklm\")\n    'bcdf\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    ",
            "wuwi": "   remove_vowels is a function that takes string and returns string only with consonants.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\nghijklm\")\n    'bcdf\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    ",
            "nuwi": "   remove_vowels is a function that takes string and returns string only with consonants.\n",
            "changes": "PartialOutput"
        },
        "id": 51,
        "signature": {
            "name": "remove_vowels",
            "returns": "",
            "params": [
                "text"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_remove_vowels(self):\n        self.assertTrue(remove_vowels('') == '')\n        self.assertTrue(remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm')\n        self.assertTrue(remove_vowels('fedcba') == 'fdcb')\n        self.assertTrue(remove_vowels('eeeee') == '')\n        self.assertTrue(remove_vowels('acBAA') == 'cB')\n        self.assertTrue(remove_vowels('EcBOO') == 'cB')\n        self.assertTrue(remove_vowels('ybcd') == 'ybcd')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return True if all numbers in the list l are below threshold t.",
            "wuni": "Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse",
            "wuwi": "Return True if all numbers in the list l are below or equal threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse",
            "nuwi": "Return True if all numbers in the list l are below or equal threshold t.\n",
            "changes": "Extensive"
        },
        "id": 52,
        "signature": {
            "name": "below_threshold",
            "returns": "",
            "params": [
                "l: list",
                "t: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_below_threshold(self):\n        self.assertTrue(below_threshold([1, 2, 4, 10], 100))\n        self.assertFalse(below_threshold([1, 20, 4, 10], 5))\n        self.assertTrue(below_threshold([1, 20, 4, 10], 21))\n        self.assertTrue(below_threshold([1, 20, 4, 10], 22))\n        self.assertTrue(below_threshold([1, 8, 4, 10], 11))\n        self.assertFalse(below_threshold([1, 8, 4, 10], 10))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Add two numbers x and y\n",
            "wuni": "Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12",
            "wuwi": "Add two numbers absolute values x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12",
            "nuwi": "Add two numbers absolute values x and y",
            "changes": "ABS"
        },
        "id": 53,
        "signature": {
            "name": "add",
            "returns": "",
            "params": [
                "x: int",
                "y: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return x + y\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_add(self):\n        import random\n        self.assertTrue(add(0, 1) == 1)\n        self.assertTrue(add(1, 0) == 1)\n        self.assertTrue(add(2, 3) == 5)\n        self.assertTrue(add(5, 7) == 12)\n        self.assertTrue(add(7, 5) == 12)\n        for i in range(100):\n            x, y = (random.randint(0, 1000), random.randint(0, 1000))\n            self.assertTrue(add(x, y) == x + y)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Check if two words have the same characters.\n",
            "wuni": "Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse",
            "wuwi": "Check if the first words does have all the characters the second word has.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse",
            "nuwi": "Check if the first words does have all the characters the second word has.\n",
            "changes": "Extensive"
        },
        "id": 54,
        "signature": {
            "name": "same_chars",
            "returns": "",
            "params": [
                "s0: str",
                "s1: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return set(s0) == set(s1)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_same_chars(self):\n        self.assertTrue(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True)\n        self.assertTrue(same_chars('abcd', 'dddddddabc') == True)\n        self.assertTrue(same_chars('dddddddabc', 'abcd') == True)\n        self.assertTrue(same_chars('eabcd', 'dddddddabc') == False)\n        self.assertTrue(same_chars('abcd', 'dddddddabcf') == False)\n        self.assertTrue(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False)\n        self.assertTrue(same_chars('aabb', 'aaccc') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return n-th Fibonacci number.\n",
            "wuni": "Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21",
            "wuwi": "Return (n-1)-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21",
            "nuwi": "Return (n-1)-th Fibonacci number.\n",
            "changes": "SimilarOutput"
        },
        "id": 55,
        "signature": {
            "name": "fib",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_fib(self):\n        self.assertTrue(fib(10) == 55)\n        self.assertTrue(fib(1) == 1)\n        self.assertTrue(fib(8) == 21)\n        self.assertTrue(fib(11) == 89)\n        self.assertTrue(fib(12) == 144)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n",
            "wuni": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse",
            "wuwi": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket and vice versa.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse",
            "nuwi": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket and vice versa.",
            "changes": "Restrictive"
        },
        "id": 56,
        "signature": {
            "name": "correct_bracketing",
            "returns": "",
            "params": [
                "brackets: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_correct_bracketing(self):\n        self.assertTrue(correct_bracketing('<>'))\n        self.assertTrue(correct_bracketing('<<><>>'))\n        self.assertTrue(correct_bracketing('<><><<><>><>'))\n        self.assertTrue(correct_bracketing('<><><<<><><>><>><<><><<>>>'))\n        self.assertFalse(correct_bracketing('<<<><>>>>'))\n        self.assertFalse(correct_bracketing('><<>'))\n        self.assertFalse(correct_bracketing('<'))\n        self.assertFalse(correct_bracketing('<<<<'))\n        self.assertFalse(correct_bracketing('>'))\n        self.assertFalse(correct_bracketing('<<>'))\n        self.assertFalse(correct_bracketing('<><><<><>><>><<>'))\n        self.assertFalse(correct_bracketing('<><><<><>><>>><>'))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return True is list elements are monotonically increasing or decreasing.\n",
            "wuni": "Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue",
            "wuwi": "Return True is list elements are strictly monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue",
            "nuwi": "Return True is list elements are strictly monotonically increasing or decreasing.\n",
            "changes": "Restrictive"
        },
        "id": 57,
        "signature": {
            "name": "monotonic",
            "returns": "",
            "params": [
                "l: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_monotonic(self):\n        self.assertTrue(monotonic([1, 2, 4, 10]) == True)\n        self.assertTrue(monotonic([1, 2, 4, 20]) == True)\n        self.assertTrue(monotonic([1, 20, 4, 10]) == False)\n        self.assertTrue(monotonic([4, 1, 0, -10]) == True)\n        self.assertTrue(monotonic([4, 1, 1, 0]) == True)\n        self.assertTrue(monotonic([1, 2, 3, 2, 5, 60]) == False)\n        self.assertTrue(monotonic([1, 2, 3, 4, 5, 60]) == True)\n        self.assertTrue(monotonic([9, 9, 9, 9]) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return sorted unique common elements for two lists.\n",
            "wuni": "Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]",
            "wuwi": "Return sorted unique common elements for two lists, that only occured in the second list once.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]",
            "nuwi": "Return sorted unique common elements for two lists, that only occured in the second list once.\n",
            "changes": "Extensive"
        },
        "id": 58,
        "signature": {
            "name": "common",
            "returns": "",
            "params": [
                "l1: list",
                "l2: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_common(self):\n        self.assertTrue(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n        self.assertTrue(common([5, 3, 2, 8], [3, 2]) == [2, 3])\n        self.assertTrue(common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n        self.assertTrue(common([4, 3, 2, 8], []) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n",
            "wuni": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2",
            "wuwi": "Return the largest prime factor of n. Assume n > 1.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2",
            "nuwi": "Return the largest prime factor of n. Assume n > 1",
            "changes": "OCD"
        },
        "id": 59,
        "signature": {
            "name": "largest_prime_factor",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def is_prime(k):\n    if k < 2:\n        return False\n    for i in range(2, k - 1):\n        if k % i == 0:\n            return False\n    return True"
            ]
        },
        "code": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_largest_prime_factor(self):\n        self.assertTrue(largest_prime_factor(15) == 5)\n        self.assertTrue(largest_prime_factor(27) == 3)\n        self.assertTrue(largest_prime_factor(63) == 7)\n        self.assertTrue(largest_prime_factor(330) == 11)\n        self.assertTrue(largest_prime_factor(13195) == 29)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "sum_to_n is a function that sums numbers from 1 to n.\n",
            "wuni": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1",
            "wuwi": "sum_to_n is a function that sums numbers from 1 to n+1.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1",
            "nuwi": "sum_to_n is a function that sums numbers from 1 to n+1.\n",
            "changes": "OCD"
        },
        "id": 60,
        "signature": {
            "name": "sum_to_n",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sum(range(n + 1))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_sum_to_n(self):\n        self.assertTrue(sum_to_n(1) == 1)\n        self.assertTrue(sum_to_n(6) == 21)\n        self.assertTrue(sum_to_n(11) == 66)\n        self.assertTrue(sum_to_n(30) == 465)\n        self.assertTrue(sum_to_n(100) == 5050)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "",
            "wuni": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse",
            "wuwi": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket and vice versa.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse",
            "nuwi": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket and vice versa.",
            "changes": "Restrictive"
        },
        "id": 61,
        "signature": {
            "name": "correct_bracketing",
            "returns": "",
            "params": [
                "brackets: str"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_correct_bracketing(self):\n        self.assertTrue(correct_bracketing('()'))\n        self.assertTrue(correct_bracketing('(()())'))\n        self.assertTrue(correct_bracketing('()()(()())()'))\n        self.assertTrue(correct_bracketing('()()((()()())())(()()(()))'))\n        self.assertFalse(correct_bracketing('((()())))'))\n        self.assertFalse(correct_bracketing(')(()'))\n        self.assertFalse(correct_bracketing('('))\n        self.assertFalse(correct_bracketing('(((('))\n        self.assertFalse(correct_bracketing(')'))\n        self.assertFalse(correct_bracketing('(()'))\n        self.assertFalse(correct_bracketing('()()(()())())(()'))\n        self.assertFalse(correct_bracketing('()()(()())()))()'))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n",
            "wuni": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]",
            "wuwi": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form and array size.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]",
            "nuwi": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form and array size.",
            "changes": "TooMuch"
        },
        "id": 62,
        "signature": {
            "name": "derivative",
            "returns": "",
            "params": [
                "xs: list"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_derivative(self):\n        self.assertTrue(derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n        self.assertTrue(derivative([1, 2, 3]) == [2, 6])\n        self.assertTrue(derivative([3, 2, 1]) == [2, 2])\n        self.assertTrue(derivative([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n        self.assertTrue(derivative([1]) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.",
            "wuni": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24",
            "wuwi": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == -1\nfibfib(2) == 2\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24",
            "nuwi": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == -1\nfibfib(2) == 2\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n",
            "changes": "SimilarOutput"
        },
        "id": 63,
        "signature": {
            "name": "fibfib",
            "returns": "",
            "params": [
                "n: int"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    METADATA = {}\n    \n    def test_fibfib(self):\n        self.assertTrue(fibfib(2) == 1)\n        self.assertTrue(fibfib(1) == 0)\n        self.assertTrue(fibfib(5) == 4)\n        self.assertTrue(fibfib(8) == 24)\n        self.assertTrue(fibfib(10) == 81)\n        self.assertTrue(fibfib(12) == 274)\n        self.assertTrue(fibfib(14) == 927)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\n",
            "wuni": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3",
            "wuwi": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u', 'y'.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3",
            "nuwi": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u', 'y'.",
            "changes": "OCD"
        },
        "id": 64,
        "signature": {
            "name": "vowels_count",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_vowels_count(self):\n        self.assertTrue(vowels_count('abcde') == 2)\n        self.assertTrue(vowels_count('Alone') == 3)\n        self.assertTrue(vowels_count('key') == 2)\n        self.assertTrue(vowels_count('bye') == 1)\n        self.assertTrue(vowels_count('keY') == 2)\n        self.assertTrue(vowels_count('bYe') == 1)\n        self.assertTrue(vowels_count('ACEDY') == 3)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n",
            "wuni": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"",
            "wuwi": "Circular shift the digits of the integer x, shift the digits right by shift (modulo number of digits)\nand return the result as a string.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"",
            "nuwi": "Circular shift the digits of the integer x, shift the digits right by shift (modulo number of digits)\nand return the result as a string.\n",
            "changes": "SimilarOutput"
        },
        "id": 65,
        "signature": {
            "name": "circular_shift",
            "returns": "",
            "params": [
                "x",
                "shift"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_circular_shift(self):\n        self.assertTrue(circular_shift(100, 2) == '001')\n        self.assertTrue(circular_shift(12, 2) == '12')\n        self.assertTrue(circular_shift(97, 8) == '79')\n        self.assertTrue(circular_shift(12, 1) == '21')\n        self.assertTrue(circular_shift(11, 101) == '11')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n",
            "wuni": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153",
            "wuwi": "Task\nWrite a function that takes a string as input and returns the sum of characters'\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153",
            "nuwi": "Task\nWrite a function that takes a string as input and returns the sum of characters",
            "changes": "OCD"
        },
        "id": 66,
        "signature": {
            "name": "digitSum",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_digitSum(self):\n        self.assertTrue(True)\n        self.assertTrue(digitSum('') == 0)\n        self.assertTrue(digitSum('abAB') == 131)\n        self.assertTrue(digitSum('abcCd') == 67)\n        self.assertTrue(digitSum('helloE') == 69)\n        self.assertTrue(digitSum('woArBld') == 131)\n        self.assertTrue(digitSum('aAaaaXa') == 153)\n        self.assertTrue(True)\n        self.assertTrue(digitSum(' How are yOu?') == 151)\n        self.assertTrue(digitSum('You arE Very Smart') == 327)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\n",
            "wuni": "In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19",
            "wuwi": "In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango and apples fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19",
            "nuwi": "In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango and apples fruits in the basket.\n",
            "changes": "OCD"
        },
        "id": 67,
        "signature": {
            "name": "fruit_distribution",
            "returns": "",
            "params": [
                "s",
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_fruit_distribution(self):\n        self.assertTrue(fruit_distribution('5 apples and 6 oranges', 19) == 8)\n        self.assertTrue(fruit_distribution('5 apples and 6 oranges', 21) == 10)\n        self.assertTrue(fruit_distribution('0 apples and 1 oranges', 3) == 2)\n        self.assertTrue(fruit_distribution('1 apples and 0 oranges', 3) == 2)\n        self.assertTrue(fruit_distribution('2 apples and 3 oranges', 100) == 95)\n        self.assertTrue(fruit_distribution('2 apples and 3 oranges', 5) == 0)\n        self.assertTrue(fruit_distribution('1 apples and 100 oranges', 120) == 19)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n",
            "wuni": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value",
            "wuwi": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has biggest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\n    Input: [4,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: [1,2,3]\n    Output: [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: []\n    Output: []\n\nExample 4:\n    Input: [5, 0, 3, 0, 4, 2]\n    Output: [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value",
            "nuwi": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has biggest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n",
            "changes": "SimilarOutput"
        },
        "id": 68,
        "signature": {
            "name": "pluck",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_pluck(self):\n        self.assertTrue(True)\n        self.assertTrue(pluck([4, 2, 3]) == [2, 1])\n        self.assertTrue(pluck([1, 2, 3]) == [2, 1])\n        self.assertTrue(pluck([]) == [])\n        self.assertTrue(pluck([5, 0, 3, 0, 4, 2]) == [0, 1])\n        self.assertTrue(True)\n        self.assertTrue(pluck([1, 2, 3, 0, 5, 3]) == [0, 3])\n        self.assertTrue(pluck([5, 4, 8, 4, 8]) == [4, 1])\n        self.assertTrue(pluck([7, 6, 7, 1]) == [6, 1])\n        self.assertTrue(pluck([7, 9, 7, 1]) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\n",
            "wuni": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\n    search([4, 1, 2, 2, 3, 1]) == 2\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    search([5, 5, 4, 4, 4]) == -1",
            "wuwi": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\n    search([4, 1, 2, 2, 3, 1]) == 2\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    search([5, 5, 4, 4, 4]) == -1",
            "nuwi": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\n",
            "changes": "OCD"
        },
        "id": 69,
        "signature": {
            "name": "search",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_search(self):\n        self.assertTrue(search([5, 5, 5, 5, 1]) == 1)\n        self.assertTrue(search([4, 1, 4, 1, 4, 4]) == 4)\n        self.assertTrue(search([3, 3]) == -1)\n        self.assertTrue(search([8, 8, 8, 8, 8, 8, 8, 8]) == 8)\n        self.assertTrue(search([2, 3, 3, 2, 2]) == 2)\n        self.assertTrue(search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n        self.assertTrue(search([3, 2, 8, 2]) == 2)\n        self.assertTrue(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1)\n        self.assertTrue(search([8, 8, 3, 6, 5, 6, 4]) == -1)\n        self.assertTrue(search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1)\n        self.assertTrue(search([1, 9, 10, 1, 3]) == 1)\n        self.assertTrue(search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\n        self.assertTrue(search([1]) == 1)\n        self.assertTrue(search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\n        self.assertTrue(search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\n        self.assertTrue(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1)\n        self.assertTrue(search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\n        self.assertTrue(search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n        self.assertTrue(search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2)\n        self.assertTrue(search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1)\n        self.assertTrue(search([10]) == -1)\n        self.assertTrue(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\n        self.assertTrue(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1)\n        self.assertTrue(search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\n        self.assertTrue(search([3, 10, 10, 9, 2]) == -1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n",
            "wuni": "Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []",
            "wuwi": "Given list of integers, return list in a special order.\n Start with the maximum value,\nthen minimum of the remaining integers, then maximum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []",
            "nuwi": "Given list of integers, return list in a special order.\n Start with the maximum value,\nthen minimum of the remaining integers, then maximum and so on.",
            "changes": "FlippedOutput"
        },
        "id": 70,
        "signature": {
            "name": "strange_sort_list",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_strange_sort_list(self):\n        self.assertTrue(strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3])\n        self.assertTrue(strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n        self.assertTrue(strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n        self.assertTrue(strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n        self.assertTrue(strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5])\n        self.assertTrue(strange_sort_list([]) == [])\n        self.assertTrue(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n        self.assertTrue(strange_sort_list([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n        self.assertTrue(strange_sort_list([111111]) == [111111])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\n",
            "wuni": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1",
            "wuwi": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 1 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1",
            "nuwi": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 1 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\n",
            "changes": "precision"
        },
        "id": 71,
        "signature": {
            "name": "triangle_area",
            "returns": "",
            "params": [
                "a",
                "b",
                "c"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_triangle_area(self):\n        self.assertTrue(triangle_area(3, 4, 5) == 6.0)\n        self.assertTrue(triangle_area(1, 2, 10) == -1)\n        self.assertTrue(triangle_area(4, 8, 5) == 8.18)\n        self.assertTrue(triangle_area(2, 2, 2) == 1.73)\n        self.assertTrue(triangle_area(1, 2, 3) == -1)\n        self.assertTrue(triangle_area(10, 5, 7) == 16.25)\n        self.assertTrue(triangle_area(2, 6, 3) == -1)\n        self.assertTrue(triangle_area(1, 1, 1) == 0.43)\n        self.assertTrue(triangle_area(2, 2, 10) == -1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n",
            "wuni": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False \n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.",
            "wuwi": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False \n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.",
            "nuwi": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than the maximum possible weight w.\n",
            "changes": "Restrictive"
        },
        "id": 72,
        "signature": {
            "name": "will_it_fly",
            "returns": "",
            "params": [
                "q",
                "w"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_will_it_fly(self):\n        self.assertTrue(will_it_fly([3, 2, 3], 9) is True)\n        self.assertTrue(will_it_fly([1, 2], 5) is False)\n        self.assertTrue(will_it_fly([3], 5) is True)\n        self.assertTrue(will_it_fly([3, 2, 3], 1) is False)\n        self.assertTrue(will_it_fly([1, 2, 3], 6) is False)\n        self.assertTrue(will_it_fly([5], 5) is True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n",
            "wuni": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0",
            "wuwi": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the absolute values of the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0",
            "nuwi": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the absolute values of the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n",
            "changes": "ABS"
        },
        "id": 73,
        "signature": {
            "name": "smallest_change",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_smallest_change(self):\n        self.assertTrue(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n        self.assertTrue(smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1)\n        self.assertTrue(smallest_change([1, 4, 2]) == 1)\n        self.assertTrue(smallest_change([1, 4, 4, 2]) == 1)\n        self.assertTrue(smallest_change([1, 2, 3, 2, 1]) == 0)\n        self.assertTrue(smallest_change([3, 1, 1, 3]) == 0)\n        self.assertTrue(smallest_change([1]) == 0)\n        self.assertTrue(smallest_change([0, 1]) == 1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n",
            "wuni": "Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']",
            "wuwi": "Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the second list.\n\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']",
            "nuwi": "Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the second list.\n",
            "changes": "SimilarOutput"
        },
        "id": 74,
        "signature": {
            "name": "total_match",
            "returns": "",
            "params": [
                "lst1",
                "lst2"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_total_match(self):\n        self.assertTrue(True)\n        self.assertTrue(total_match([], []) == [])\n        self.assertTrue(total_match(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi'])\n        self.assertTrue(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin'])\n        self.assertTrue(total_match(['4'], ['1', '2', '3', '4', '5']) == ['4'])\n        self.assertTrue(total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi'])\n        self.assertTrue(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi'])\n        self.assertTrue(total_match(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin'])\n        self.assertTrue(True)\n        self.assertTrue(total_match([], ['this']) == [])\n        self.assertTrue(total_match(['this'], []) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. ",
            "wuni": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5",
            "wuwi": "Write a function that returns true if the given number is the multiplication of 2 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5",
            "nuwi": "Write a function that returns true if the given number is the multiplication of 2 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.",
            "changes": "Extensive"
        },
        "id": 75,
        "signature": {
            "name": "is_multiply_prime",
            "returns": "",
            "params": [
                "a"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def is_prime(n):\n    for j in range(2, n):\n        if n % j == 0:\n            return False\n    return True"
            ]
        },
        "code": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_multiply_prime(self):\n        self.assertTrue(is_multiply_prime(5) == False)\n        self.assertTrue(is_multiply_prime(30) == True)\n        self.assertTrue(is_multiply_prime(8) == True)\n        self.assertTrue(is_multiply_prime(10) == False)\n        self.assertTrue(is_multiply_prime(125) == True)\n        self.assertTrue(is_multiply_prime(3 * 5 * 7) == True)\n        self.assertTrue(is_multiply_prime(3 * 6 * 7) == False)\n        self.assertTrue(is_multiply_prime(9 * 9 * 9) == False)\n        self.assertTrue(is_multiply_prime(11 * 9 * 9) == False)\n        self.assertTrue(is_multiply_prime(11 * 13 * 7) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\n",
            "wuni": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false",
            "wuwi": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if |n|**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false",
            "nuwi": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if |n|**int=x\n",
            "changes": "ABS"
        },
        "id": 76,
        "signature": {
            "name": "is_simple_power",
            "returns": "",
            "params": [
                "x",
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_simple_power(self):\n        self.assertTrue(is_simple_power(16, 2) == True)\n        self.assertTrue(is_simple_power(143214, 16) == False)\n        self.assertTrue(is_simple_power(4, 2) == True)\n        self.assertTrue(is_simple_power(9, 3) == True)\n        self.assertTrue(is_simple_power(16, 4) == True)\n        self.assertTrue(is_simple_power(24, 2) == False)\n        self.assertTrue(is_simple_power(128, 4) == False)\n        self.assertTrue(is_simple_power(12, 6) == False)\n        self.assertTrue(is_simple_power(1, 1) == True)\n        self.assertTrue(is_simple_power(1, 12) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that takes an integer a and returns True \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.",
            "wuni": "Write a function that takes an integer a and returns True \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False",
            "wuwi": "Write a function that takes an integer a and returns True \nif this ingeger is a sextic of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False",
            "nuwi": "Write a function that takes an integer a and returns True \nif this ingeger is a sextic of some integer number.\nNote: you may assume the input is always valid.",
            "changes": "Restrictive"
        },
        "id": 77,
        "signature": {
            "name": "iscube",
            "returns": "",
            "params": [
                "a"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_iscube(self):\n        self.assertTrue(iscube(1) == True)\n        self.assertTrue(iscube(2) == False)\n        self.assertTrue(iscube(-1) == True)\n        self.assertTrue(iscube(64) == True)\n        self.assertTrue(iscube(180) == False)\n        self.assertTrue(iscube(1000) == True)\n        self.assertTrue(iscube(0) == True)\n        self.assertTrue(iscube(1729) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\n",
            "wuni": "You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.",
            "wuwi": "You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than or equal 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.",
            "nuwi": "You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than or equal 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\n",
            "changes": "OCD"
        },
        "id": 78,
        "signature": {
            "name": "hex_key",
            "returns": "",
            "params": [
                "num"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_hex_key(self):\n        self.assertTrue(hex_key('AB') == 1)\n        self.assertTrue(hex_key('1077E') == 2)\n        self.assertTrue(hex_key('ABED1A33') == 4)\n        self.assertTrue(hex_key('2020') == 2)\n        self.assertTrue(hex_key('123456789ABCDEF0') == 6)\n        self.assertTrue(hex_key('112233445566778899AABBCCDDEEFF00') == 12)\n        self.assertTrue(hex_key([]) == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n",
            "wuni": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"",
            "wuwi": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"",
            "nuwi": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n",
            "changes": "PartialOutput"
        },
        "id": 79,
        "signature": {
            "name": "decimal_to_binary",
            "returns": "",
            "params": [
                "decimal"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_decimal_to_binary(self):\n        self.assertTrue(decimal_to_binary(0) == 'db0db')\n        self.assertTrue(decimal_to_binary(32) == 'db100000db')\n        self.assertTrue(decimal_to_binary(103) == 'db1100111db')\n        self.assertTrue(decimal_to_binary(15) == 'db1111db')\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n",
            "wuni": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False",
            "wuwi": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 4 and every 4 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False",
            "nuwi": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 4 and every 4 consecutive letters are distinct\n",
            "changes": "Restrictive"
        },
        "id": 80,
        "signature": {
            "name": "is_happy",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_happy(self):\n        self.assertTrue(is_happy('a') == False)\n        self.assertTrue(is_happy('aa') == False)\n        self.assertTrue(is_happy('abcd') == True)\n        self.assertTrue(is_happy('aabb') == False)\n        self.assertTrue(is_happy('adb') == True)\n        self.assertTrue(is_happy('xyy') == False)\n        self.assertTrue(is_happy('iopaxpoi') == True)\n        self.assertTrue(is_happy('iopaxioi') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n",
            "wuni": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']",
            "wuwi": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        >= 3.7                A \n        >= 3.3                A- \n        >= 3.0                B+\n        >= 2.7                B \n        >= 2.3                B-\n        >= 2.0                C+\n        >= 1.7                C\n        >= 1.3                C-\n        >= 1.0                D+ \n        >= 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']",
            "nuwi": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        >= 3.7                A \n        >= 3.3                A- \n        >= 3.0                B+\n        >= 2.7                B \n        >= 2.3                B-\n        >= 2.0                C+\n        >= 1.7                C\n        >= 1.3                C-\n        >= 1.0                D+ \n        >= 0.7                D \n        > 0.0                D-\n          0.0                E\n\n",
            "changes": "OCD"
        },
        "id": 81,
        "signature": {
            "name": "numerical_letter_grade",
            "returns": "",
            "params": [
                "grades"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_numerical_letter_grade(self):\n        self.assertTrue(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'])\n        self.assertTrue(numerical_letter_grade([1.2]) == ['D+'])\n        self.assertTrue(numerical_letter_grade([0.5]) == ['D-'])\n        self.assertTrue(numerical_letter_grade([0.0]) == ['E'])\n        self.assertTrue(numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+'])\n        self.assertTrue(numerical_letter_grade([0, 0.7]) == ['E', 'D-'])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\n",
            "wuni": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False",
            "wuwi": "Write a function that takes a string and returns True if the string\nlength is a prime number and fibonacchi number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False",
            "nuwi": "Write a function that takes a string and returns True if the string\nlength is a prime number and fibonacchi number or False otherwise\n",
            "changes": "Restrictive"
        },
        "id": 82,
        "signature": {
            "name": "prime_length",
            "returns": "",
            "params": [
                "string"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_prime_length(self):\n        self.assertTrue(prime_length('Hello') == True)\n        self.assertTrue(prime_length('abcdcba') == True)\n        self.assertTrue(prime_length('kittens') == True)\n        self.assertTrue(prime_length('orange') == False)\n        self.assertTrue(prime_length('wow') == True)\n        self.assertTrue(prime_length('world') == True)\n        self.assertTrue(prime_length('MadaM') == True)\n        self.assertTrue(prime_length('Wow') == True)\n        self.assertTrue(prime_length('') == False)\n        self.assertTrue(prime_length('HI') == True)\n        self.assertTrue(prime_length('go') == True)\n        self.assertTrue(prime_length('gogo') == False)\n        self.assertTrue(prime_length('aaaaaaaaaaaaaaa') == False)\n        self.assertTrue(prime_length('Madam') == True)\n        self.assertTrue(prime_length('M') == False)\n        self.assertTrue(prime_length('0') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.",
            "wuni": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.",
            "wuwi": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start and end with 1.",
            "nuwi": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start and end with 1.",
            "changes": "OCD"
        },
        "id": 83,
        "signature": {
            "name": "starts_one_ends",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_starts_one_ends(self):\n        self.assertTrue(True)\n        self.assertTrue(starts_one_ends(1) == 1)\n        self.assertTrue(starts_one_ends(2) == 18)\n        self.assertTrue(starts_one_ends(3) == 180)\n        self.assertTrue(starts_one_ends(4) == 1800)\n        self.assertTrue(starts_one_ends(5) == 18000)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer N, return the total sum of its digits in binary.\n",
            "wuni": "Given a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number",
            "wuwi": "Given a positive integer N, return the total multiplicative of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number",
            "nuwi": "Given a positive integer N, return the total multiplicative of its digits in binary.\n",
            "changes": "wild"
        },
        "id": 84,
        "signature": {
            "name": "solve",
            "returns": "",
            "params": [
                "N"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_solve(self):\n        self.assertTrue(True)\n        self.assertTrue(solve(1000) == '1')\n        self.assertTrue(solve(150) == '110')\n        self.assertTrue(solve(147) == '1100')\n        self.assertTrue(True)\n        self.assertTrue(solve(333) == '1001')\n        self.assertTrue(solve(963) == '10010')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n",
            "wuni": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 ",
            "wuwi": "Given a non-empty list of integers lst. add the elements that are at odd indices..\n\n\nExamples:\n    add([4, 2, 6, 7]) ==> 2 ",
            "nuwi": "Given a non-empty list of integers lst. add the elements that are at odd indices..\n",
            "changes": "OCD"
        },
        "id": 85,
        "signature": {
            "name": "add",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_add(self):\n        self.assertTrue(add([4, 88]) == 88)\n        self.assertTrue(add([4, 5, 6, 7, 2, 122]) == 122)\n        self.assertTrue(add([4, 0, 6, 7]) == 0)\n        self.assertTrue(add([4, 4, 6, 8]) == 12)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n",
            "wuni": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'",
            "wuwi": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where the last word (separated by space)\nist replaced by a new word where all the characters arranged in\nascending order based on ascii value .\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'",
            "nuwi": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where the last word (separated by space)\nist replaced by a new word where all the characters arranged in\nascending order based on ascii value .\nNote: You should keep the order of words and blank spaces in the sentence.\n",
            "changes": "SimilarOutput"
        },
        "id": 86,
        "signature": {
            "name": "anti_shuffle",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_anti_shuffle(self):\n        self.assertTrue(anti_shuffle('Hi') == 'Hi')\n        self.assertTrue(anti_shuffle('hello') == 'ehllo')\n        self.assertTrue(anti_shuffle('number') == 'bemnru')\n        self.assertTrue(anti_shuffle('abcd') == 'abcd')\n        self.assertTrue(anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor')\n        self.assertTrue(anti_shuffle('') == '')\n        self.assertTrue(anti_shuffle('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n",
            "wuni": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
            "wuwi": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - ( columns , row), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
            "nuwi": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - ( columns , row), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n",
            "changes": "FlippedOutput"
        },
        "id": 87,
        "signature": {
            "name": "get_row",
            "returns": "",
            "params": [
                "lst",
                "x"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_get_row(self):\n        self.assertTrue(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n        self.assertTrue(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n        self.assertTrue(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n        self.assertTrue(get_row([], 1) == [])\n        self.assertTrue(get_row([[1]], 2) == [])\n        self.assertTrue(get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n",
            "wuni": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]",
            "wuwi": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, second index value) is odd,\nor sort it in descending order if the sum( first index value, second index value) is even. If the second index doesnt exist, use the first instead\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]",
            "nuwi": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, second index value) is odd,\nor sort it in descending order if the sum( first index value, second index value) is even. If the second index doesnt exist, use the first instead\n",
            "changes": "SimilarOutput"
        },
        "id": 88,
        "signature": {
            "name": "sort_array",
            "returns": "",
            "params": [
                "array"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_sort_array(self):\n        self.assertTrue(True)\n        self.assertTrue(sort_array([]) == [])\n        self.assertTrue(sort_array([5]) == [5])\n        self.assertTrue(sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n        self.assertTrue(sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n        self.assertTrue(True)\n        self.assertTrue(sort_array([2, 1]) == [1, 2])\n        self.assertTrue(sort_array([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n        self.assertTrue(sort_array([21, 14, 23, 11]) == [23, 21, 14, 11])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\n",
            "wuni": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'",
            "wuwi": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places. And then sorted by ascending Ascii values.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'",
            "nuwi": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places. And then sorted by ascending Ascii values.",
            "changes": "SimilarOutput"
        },
        "id": 89,
        "signature": {
            "name": "encrypt",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_encrypt(self):\n        self.assertTrue(encrypt('hi') == 'lm')\n        self.assertTrue(encrypt('asdfghjkl') == 'ewhjklnop')\n        self.assertTrue(encrypt('gf') == 'kj')\n        self.assertTrue(encrypt('et') == 'ix')\n        self.assertTrue(encrypt('faewfawefaewg') == 'jeiajeaijeiak')\n        self.assertTrue(encrypt('hellomyfriend') == 'lippsqcjvmirh')\n        self.assertTrue(encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n        self.assertTrue(encrypt('a') == 'e')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.",
            "wuni": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None",
            "wuwi": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nIf the smallest value does exist multiple times in the Array pick it as the 2nd_smallest, if there are multiple elements fighting for the second smallest, pick the one with the lowest index. Return None if that doesn't work either,\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None",
            "nuwi": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nIf the smallest value does exist multiple times in the Array pick it as the 2nd_smallest, if there are multiple elements fighting for the second smallest, pick the one with the lowest index. Return None if that doesn't work either,",
            "changes": "SimilarOutput"
        },
        "id": 90,
        "signature": {
            "name": "next_smallest",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_next_smallest(self):\n        self.assertTrue(next_smallest([1, 2, 3, 4, 5]) == 2)\n        self.assertTrue(next_smallest([5, 1, 4, 3, 2]) == 2)\n        self.assertTrue(next_smallest([]) == None)\n        self.assertTrue(next_smallest([1, 1]) == None)\n        self.assertTrue(next_smallest([1, 1, 1, 1, 0]) == 1)\n        self.assertTrue(next_smallest([1, 0 ** 0]) == None)\n        self.assertTrue(next_smallest([-35, 34, 12, -45]) == -35)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.",
            "wuni": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1",
            "wuwi": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with an one letter word.\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1",
            "nuwi": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with an one letter word.\nSentences are delimited by '.', '?' or '!'.",
            "changes": "SimilarOutput"
        },
        "id": 91,
        "signature": {
            "name": "is_bored",
            "returns": "",
            "params": [
                "S"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import re"
            ],
            "other_methods": []
        },
        "code": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_bored(self):\n        self.assertTrue(is_bored('Hello world') == 0)\n        self.assertTrue(is_bored('Is the sky blue?') == 0)\n        self.assertTrue(is_bored('I love It !') == 1)\n        self.assertTrue(is_bored('bIt') == 0)\n        self.assertTrue(is_bored('I feel good today. I will be productive. will kill It') == 2)\n        self.assertTrue(is_bored('You and I are going for a walk') == 0)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n",
            "wuni": "Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False",
            "wuwi": "Create a function that takes 3 numbers.\nReturns true if the last number is equal to the sum of the first two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False",
            "nuwi": "Create a function that takes 3 numbers.\nReturns true if the last number is equal to the sum of the first two, and all numbers are integers.\nReturns false in any other cases.\n",
            "changes": "Restrictive"
        },
        "id": 92,
        "signature": {
            "name": "any_int",
            "returns": "",
            "params": [
                "x",
                "y",
                "z"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_any_int(self):\n        self.assertTrue(any_int(2, 3, 1) == True)\n        self.assertTrue(any_int(2.5, 2, 3) == False)\n        self.assertTrue(any_int(1.5, 5, 3.5) == False)\n        self.assertTrue(any_int(2, 6, 2) == False)\n        self.assertTrue(any_int(4, 2, 2) == True)\n        self.assertTrue(any_int(2.2, 2.2, 2.2) == False)\n        self.assertTrue(any_int(-4, 6, 2) == True)\n        self.assertTrue(any_int(2, 1, 1) == True)\n        self.assertTrue(any_int(3, 4, 7) == True)\n        self.assertTrue(any_int(3.0, 4, 7) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n",
            "wuni": "Write a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'",
            "wuwi": "Write a function that takes a message, and encodes in such a \nway that it uppercases all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'",
            "nuwi": "Write a function that takes a message, and encodes in such a \nway that it uppercases all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\n",
            "changes": ""
        },
        "id": 93,
        "signature": {
            "name": "encode",
            "returns": "",
            "params": [
                "message"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_encode(self):\n        self.assertTrue(encode('TEST') == 'tgst')\n        self.assertTrue(encode('Mudasir') == 'mWDCSKR')\n        self.assertTrue(encode('YES') == 'ygs')\n        self.assertTrue(encode('This is a message') == 'tHKS KS C MGSSCGG')\n        self.assertTrue(encode('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n",
            "wuni": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7",
            "wuwi": "You are given a list of integers.\nYou need to find the largest value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7",
            "nuwi": "You are given a list of integers.\nYou need to find the largest value and return the sum of its digits.\n\n",
            "changes": "SimilarOutput"
        },
        "id": 94,
        "signature": {
            "name": "skjkasdkd",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def isPrime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
            ]
        },
        "code": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_skjkasdkd(self):\n        self.assertTrue(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n        self.assertTrue(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\n        self.assertTrue(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n        self.assertTrue(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n        self.assertTrue(skjkasdkd([0, 81, 12, 3, 1, 21]) == 3)\n        self.assertTrue(skjkasdkd([0, 8, 1, 2, 1, 7]) == 7)\n        self.assertTrue(skjkasdkd([8191]) == 19)\n        self.assertTrue(skjkasdkd([8191, 123456, 127, 7]) == 19)\n        self.assertTrue(skjkasdkd([127, 97, 8192]) == 10)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.",
            "wuni": "Given a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.",
            "wuwi": "Given a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return true is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.",
            "nuwi": "Given a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return true is the given dictionary is empty.",
            "changes": "Extensive"
        },
        "id": 95,
        "signature": {
            "name": "check_dict_case",
            "returns": "",
            "params": [
                "dict"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_check_dict_case(self):\n        self.assertTrue(check_dict_case({'p': 'pineapple', 'b': 'banana'}) == True)\n        self.assertTrue(check_dict_case({'p': 'pineapple', 'A': 'banana', 'B': 'banana'}) == False)\n        self.assertTrue(check_dict_case({'p': 'pineapple', 5: 'banana', 'a': 'apple'}) == False)\n        self.assertTrue(check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'}) == False)\n        self.assertTrue(check_dict_case({'STATE': 'NC', 'ZIP': '12345'}) == True)\n        self.assertTrue(check_dict_case({'fruit': 'Orange', 'taste': 'Sweet'}) == True)\n        self.assertTrue(check_dict_case({}) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\n",
            "wuni": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]",
            "wuwi": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less or equal to n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]",
            "nuwi": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less or equal to n.\n",
            "changes": "TooMuch"
        },
        "id": 96,
        "signature": {
            "name": "count_up_to",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_count_up_to(self):\n        self.assertTrue(count_up_to(5) == [2, 3])\n        self.assertTrue(count_up_to(6) == [2, 3, 5])\n        self.assertTrue(count_up_to(7) == [2, 3, 5])\n        self.assertTrue(count_up_to(10) == [2, 3, 5, 7])\n        self.assertTrue(count_up_to(0) == [])\n        self.assertTrue(count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n        self.assertTrue(count_up_to(1) == [])\n        self.assertTrue(count_up_to(18) == [2, 3, 5, 7, 11, 13, 17])\n        self.assertTrue(count_up_to(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n        self.assertTrue(count_up_to(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.",
            "wuni": "Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.",
            "wuwi": "Complete the function that takes two integers and returns \nthe summ of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.",
            "nuwi": "Complete the function that takes two integers and returns \nthe summ of their unit digits.\nAssume the input is always valid.",
            "changes": "wild"
        },
        "id": 97,
        "signature": {
            "name": "multiply",
            "returns": "",
            "params": [
                "a",
                "b"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return abs(a % 10) * abs(b % 10)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_multiply(self):\n        self.assertTrue(multiply(148, 412) == 16)\n        self.assertTrue(multiply(19, 28) == 72)\n        self.assertTrue(multiply(2020, 1851) == 0)\n        self.assertTrue(multiply(14, -15) == 20)\n        self.assertTrue(multiply(76, 67) == 42)\n        self.assertTrue(multiply(17, 27) == 49)\n        self.assertTrue(multiply(0, 1) == 0)\n        self.assertTrue(multiply(0, 0) == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string s, count the number of uppercase vowels in even indices.\n",
            "wuni": "Given a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0",
            "wuwi": "Given a string s, count the number of uppercase vowels.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0",
            "nuwi": "Given a string s, count the number of uppercase vowels.\n",
            "changes": "SimilarOutput"
        },
        "id": 98,
        "signature": {
            "name": "count_upper",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_count_upper(self):\n        self.assertTrue(count_upper('aBCdEf') == 1)\n        self.assertTrue(count_upper('abcdefg') == 0)\n        self.assertTrue(count_upper('dBBE') == 0)\n        self.assertTrue(count_upper('B') == 0)\n        self.assertTrue(count_upper('U') == 1)\n        self.assertTrue(count_upper('') == 0)\n        self.assertTrue(count_upper('EEEE') == 2)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n",
            "wuni": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.",
            "wuwi": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it towards zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.",
            "nuwi": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it towards zero.\n",
            "changes": "SimilarOutput"
        },
        "id": 99,
        "signature": {
            "name": "closest_integer",
            "returns": "",
            "params": [
                "value"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "from math import floor, ceil"
            ],
            "other_methods": []
        },
        "code": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_closest_integer(self):\n        self.assertTrue(closest_integer('10') == 10)\n        self.assertTrue(closest_integer('14.5') == 15)\n        self.assertTrue(closest_integer('-15.5') == -16)\n        self.assertTrue(closest_integer('15.3') == 15)\n        self.assertTrue(closest_integer('0') == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n",
            "wuni": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]",
            "wuwi": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number \nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]",
            "nuwi": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number \nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n",
            "changes": "SimilarOutput"
        },
        "id": 100,
        "signature": {
            "name": "make_a_pile",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [n + 2*i for i in range(n)]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_make_a_pile(self):\n        self.assertTrue(make_a_pile(3) == [3, 5, 7])\n        self.assertTrue(make_a_pile(4) == [4, 6, 8, 10])\n        self.assertTrue(make_a_pile(5) == [5, 7, 9, 11, 13])\n        self.assertTrue(make_a_pile(6) == [6, 8, 10, 12, 14, 16])\n        self.assertTrue(make_a_pile(8) == [8, 10, 12, 14, 16, 18, 20, 22])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n",
            "wuni": "You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
            "wuwi": "You will be given a string of words separated by commas, and if there are non, then spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
            "nuwi": "ou will be given a string of words separated by commas, and if there are non, then spaces. Your task is\nto split the string into words and return an array of the words.\n",
            "changes": "SimilarOutput"
        },
        "id": 101,
        "signature": {
            "name": "words_string",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_words_string(self):\n        self.assertTrue(True)\n        self.assertTrue(words_string('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John'])\n        self.assertTrue(words_string('One, two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six'])\n        self.assertTrue(words_string('Hi, my name') == ['Hi', 'my', 'name'])\n        self.assertTrue(words_string('One,, two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six'])\n        self.assertTrue(True)\n        self.assertTrue(words_string('') == [])\n        self.assertTrue(words_string('ahmed     , gamal') == ['ahmed', 'gamal'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n",
            "wuni": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1",
            "wuwi": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range (x, y) exclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1",
            "nuwi": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range (x, y) exclusive. If \nthere's no such number, then the function should return -1.\n",
            "changes": "clusive"
        },
        "id": 102,
        "signature": {
            "name": "choose_num",
            "returns": "",
            "params": [
                "x",
                "y"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_choose_num(self):\n        self.assertTrue(choose_num(12, 15) == 14)\n        self.assertTrue(choose_num(13, 12) == -1)\n        self.assertTrue(choose_num(33, 12354) == 12354)\n        self.assertTrue(choose_num(5234, 5233) == -1)\n        self.assertTrue(choose_num(6, 29) == 28)\n        self.assertTrue(choose_num(27, 10) == -1)\n        self.assertTrue(choose_num(7, 7) == -1)\n        self.assertTrue(choose_num(546, 546) == 546)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\n",
            "wuni": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"",
            "wuwi": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (excluding n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"",
            "nuwi": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (excluding n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.",
            "changes": "clusive"
        },
        "id": 103,
        "signature": {
            "name": "rounded_avg",
            "returns": "",
            "params": [
                "n",
                "m"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_rounded_avg(self):\n        self.assertTrue(rounded_avg(1, 5) == '0b11')\n        self.assertTrue(rounded_avg(7, 13) == '0b1010')\n        self.assertTrue(rounded_avg(964, 977) == '0b1111001010')\n        self.assertTrue(rounded_avg(996, 997) == '0b1111100100')\n        self.assertTrue(rounded_avg(560, 851) == '0b1011000010')\n        self.assertTrue(rounded_avg(185, 546) == '0b101101110')\n        self.assertTrue(rounded_avg(362, 496) == '0b110101101')\n        self.assertTrue(rounded_avg(350, 902) == '0b1001110010')\n        self.assertTrue(rounded_avg(197, 233) == '0b11010111')\n        self.assertTrue(rounded_avg(7, 5) == -1)\n        self.assertTrue(rounded_avg(5, 1) == -1)\n        self.assertTrue(rounded_avg(5, 5) == '0b101')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n",
            "wuni": "Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]",
            "wuwi": "Given a list of positive integers x. return a sorted list of all \nelements that are uneven.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]",
            "nuwi": "Given a list of positive integers x. return a sorted list of all \nelements that are uneven.\n\nNote: Returned list should be sorted in increasing order.\n",
            "changes": "SimilarOutput"
        },
        "id": 104,
        "signature": {
            "name": "unique_digits",
            "returns": "",
            "params": [
                "x"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_unique_digits(self):\n        self.assertTrue(unique_digits([15, 33, 1422, 1]) == [1, 15, 33])\n        self.assertTrue(unique_digits([152, 323, 1422, 10]) == [])\n        self.assertTrue(unique_digits([12345, 2033, 111, 151]) == [111, 151])\n        self.assertTrue(unique_digits([135, 103, 31]) == [31, 135])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n",
            "wuni": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']",
            "wuwi": "Given an array of integers, sort the integers by their lowest digit,\nreverse the resulting array, and then replace number by the corresponding name of their lowest digit from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n  If the array is empty, return an empty array:\n  arr = []\n  return []\n\n  If the array has any strange number ignore it:\n  arr = [1, -1 , 55] \n        -> sort arr -> [-1, 1, 55]\n        -> reverse arr -> [55, 1, -1]\n  return = ['One']",
            "nuwi": "Given an array of integers, sort the integers by their lowest digit,\nreverse the resulting array, and then replace number by the corresponding name of their lowest digit from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n",
            "changes": "SimilarOutput"
        },
        "id": 105,
        "signature": {
            "name": "by_length",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_by_length(self):\n        self.assertTrue(True)\n        self.assertTrue(by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'])\n        self.assertTrue(by_length([]) == [])\n        self.assertTrue(by_length([1, -1, 55]) == ['One'])\n        self.assertTrue(True)\n        self.assertTrue(by_length([1, -1, 3, 2]) == ['Three', 'Two', 'One'])\n        self.assertTrue(by_length([9, 4, 8]) == ['Nine', 'Eight', 'Four'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
            "wuni": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]",
            "wuwi": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is uneven\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]",
            "nuwi": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is uneven\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n",
            "changes": "FlippedOutput"
        },
        "id": 106,
        "signature": {
            "name": "f",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_f(self):\n        self.assertTrue(f(5) == [1, 2, 6, 24, 15])\n        self.assertTrue(f(7) == [1, 2, 6, 24, 15, 720, 28])\n        self.assertTrue(f(1) == [1])\n        self.assertTrue(f(3) == [1, 2, 6])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.",
            "wuni": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.",
            "wuwi": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), exclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.",
            "nuwi": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), exclusive",
            "changes": "clusive"
        },
        "id": 107,
        "signature": {
            "name": "even_odd_palindrome",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def is_palindrome(n):\n    return str(n) == str(n)[::-1]"
            ]
        },
        "code": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_even_odd_palindrome(self):\n        self.assertTrue(even_odd_palindrome(123) == (8, 13))\n        self.assertTrue(even_odd_palindrome(12) == (4, 6))\n        self.assertTrue(even_odd_palindrome(3) == (1, 2))\n        self.assertTrue(even_odd_palindrome(63) == (6, 8))\n        self.assertTrue(even_odd_palindrome(25) == (5, 6))\n        self.assertTrue(even_odd_palindrome(19) == (4, 6))\n        self.assertTrue(even_odd_palindrome(9) == (4, 5))\n        self.assertTrue(even_odd_palindrome(1) == (0, 1))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n",
            "wuni": "Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3",
            "wuwi": "Write a function count_nums which takes an array of integers and returns\nthe number of elements are positive.\n\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3",
            "nuwi": "Write a function count_nums which takes an array of integers and returns\nthe number of elements are positive.\n",
            "changes": "SimilarOutput"
        },
        "id": 108,
        "signature": {
            "name": "count_nums",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def digits_sum(n):\n    neg = 1\n    if n < 0:\n        n, neg = (-1 * n, -1)\n    n = [int(i) for i in str(n)]\n    n[0] = n[0] * neg\n    return sum(n)"
            ]
        },
        "code": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_count_nums(self):\n        self.assertTrue(count_nums([]) == 0)\n        self.assertTrue(count_nums([-1, -2, 0]) == 0)\n        self.assertTrue(count_nums([1, 1, 2, -2, 3, 4, 5]) == 6)\n        self.assertTrue(count_nums([1, 6, 9, -6, 0, 1, 5]) == 5)\n        self.assertTrue(count_nums([1, 100, 98, -7, 1, -1]) == 4)\n        self.assertTrue(count_nums([12, 23, 34, -45, -56, 0]) == 5)\n        self.assertTrue(count_nums([-0, 1 ** 0]) == 1)\n        self.assertTrue(count_nums([1]) == 1)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n",
            "wuni": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            ",
            "wuwi": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation up to floor(N/2) times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n            ",
            "nuwi": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation up to floor(N/2) times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n",
            "changes": "SimilarOutput"
        },
        "id": 109,
        "signature": {
            "name": "move_one_ball",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_move_one_ball(self):\n        self.assertTrue(move_one_ball([3, 4, 5, 1, 2]) == True)\n        self.assertTrue(move_one_ball([3, 5, 10, 1, 2]) == True)\n        self.assertTrue(move_one_ball([4, 3, 1, 2]) == False)\n        self.assertTrue(move_one_ball([3, 5, 4, 1, 2]) == False)\n        self.assertTrue(move_one_ball([]) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\n",
            "wuni": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.",
            "wuwi": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\n Exchanges are only allowed between the same indicies.There is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.",
            "nuwi": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\n Exchanges are only allowed between the same indicies.There is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\n",
            "changes": "SimilarOutput"
        },
        "id": 110,
        "signature": {
            "name": "exchange",
            "returns": "",
            "params": [
                "lst1",
                "lst2"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_exchange(self):\n        self.assertTrue(exchange([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES')\n        self.assertTrue(exchange([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO')\n        self.assertTrue(exchange([1, 2, 3, 4], [2, 1, 4, 3]) == 'YES')\n        self.assertTrue(exchange([5, 7, 3], [2, 6, 4]) == 'YES')\n        self.assertTrue(exchange([5, 7, 3], [2, 6, 3]) == 'NO')\n        self.assertTrue(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == 'NO')\n        self.assertTrue(exchange([100, 200], [200, 200]) == 'YES')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n",
            "wuni": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}",
            "wuwi": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the repetition and the corresponding count.\n return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}",
            "nuwi": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the repetition and the corresponding count.\n return all of them.\n",
            "changes": "SimilarOutput"
        },
        "id": 111,
        "signature": {
            "name": "histogram",
            "returns": "",
            "params": [
                "test"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_histogram(self):\n        self.assertTrue(histogram('a b b a') == {'a': 2, 'b': 2})\n        self.assertTrue(histogram('a b c a b') == {'a': 2, 'b': 2})\n        self.assertTrue(histogram('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1})\n        self.assertTrue(histogram('r t g') == {'r': 1, 't': 1, 'g': 1})\n        self.assertTrue(histogram('b b b b a') == {'b': 4})\n        self.assertTrue(histogram('r t g') == {'r': 1, 't': 1, 'g': 1})\n        self.assertTrue(histogram('') == {})\n        self.assertTrue(histogram('a') == {'a': 1})",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\n",
            "wuni": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
            "wuwi": "Task\nWe are given two strings s and c, you have to deleted the first character in s that is equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
            "nuwi": "Task\nWe are given two strings s and c, you have to deleted the first character in s that is equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\n",
            "changes": "SimilarOutput"
        },
        "id": 112,
        "signature": {
            "name": "reverse_delete",
            "returns": "",
            "params": [
                "s",
                "c"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_reverse_delete(self):\n        self.assertTrue(reverse_delete('abcde', 'ae') == ('bcd', False))\n        self.assertTrue(reverse_delete('abcdef', 'b') == ('acdef', False))\n        self.assertTrue(reverse_delete('abcdedcba', 'ab') == ('cdedc', True))\n        self.assertTrue(reverse_delete('dwik', 'w') == ('dik', False))\n        self.assertTrue(reverse_delete('a', 'a') == ('', True))\n        self.assertTrue(reverse_delete('abcdedcba', '') == ('abcdedcba', True))\n        self.assertTrue(reverse_delete('abcdedcba', 'v') == ('abcdedcba', True))\n        self.assertTrue(reverse_delete('vabba', 'v') == ('abba', True))\n        self.assertTrue(reverse_delete('mamma', 'mia') == ('', True))",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n",
            "wuni": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
            "wuwi": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof even digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
            "nuwi": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof even digits in the i'th string of the input.\n\n",
            "changes": "wild"
        },
        "id": 113,
        "signature": {
            "name": "odd_count",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_odd_count(self):\n        self.assertTrue(odd_count(['1234567']) == ['the number of odd elements 4n the str4ng 4 of the 4nput.'])\n        self.assertTrue(odd_count(['3', '11111111']) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.'])\n        self.assertTrue(odd_count(['271', '137', '314']) == ['the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.'])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\n",
            "wuni": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6",
            "wuwi": "Given an array of integers nums, find the minimum of the array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6",
            "nuwi": "Given an array of integers nums, find the minimum of the array\nof nums.",
            "changes": "SimilarOutput"
        },
        "id": 114,
        "signature": {
            "name": "minSubArraySum",
            "returns": "",
            "params": [
                "nums"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_minSubArraySum(self):\n        self.assertTrue(minSubArraySum([2, 3, 4, 1, 2, 4]) == 1)\n        self.assertTrue(minSubArraySum([-1, -2, -3]) == -6)\n        self.assertTrue(minSubArraySum([-1, -2, -3, 2, -10]) == -14)\n        self.assertTrue(minSubArraySum([-9999999999999999]) == -9999999999999999)\n        self.assertTrue(minSubArraySum([0, 10, 20, 1000000]) == 0)\n        self.assertTrue(minSubArraySum([-1, -2, -3, 10, -5]) == -6)\n        self.assertTrue(minSubArraySum([100, -1, -2, -3, 10, -5]) == -6)\n        self.assertTrue(minSubArraySum([10, 11, 13, 8, 3, 4]) == 3)\n        self.assertTrue(minSubArraySum([100, -33, 32, -1, 0, -2]) == -33)\n        self.assertTrue(minSubArraySum([-10]) == -10)\n        self.assertTrue(minSubArraySum([7]) == 7)\n        self.assertTrue(minSubArraySum([1, -1]) == -1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n",
            "wuni": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n",
            "wuwi": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the maximum number of times you need to lower the buckets for a well.\n\n    Example 1:\n Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n",
            "nuwi": "You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the maximum number of times you need to lower the buckets for a well.\n\n    ",
            "changes": "SimilarOutput"
        },
        "id": 115,
        "signature": {
            "name": "max_fill",
            "returns": "",
            "params": [
                "grid",
                "capacity"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import math"
            ],
            "other_methods": []
        },
        "code": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_max_fill(self):\n        self.assertTrue(True)\n        self.assertTrue(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6)\n        self.assertTrue(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5)\n        self.assertTrue(max_fill([[0, 0, 0], [0, 0, 0]], 5) == 0)\n        self.assertTrue(True)\n        self.assertTrue(max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4)\n        self.assertTrue(max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n",
            "wuni": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]",
            "wuwi": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of zeros in their minimal binary representation in descending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]",
            "nuwi": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of zeros in their minimal binary representation in descending order.\nFor similar number of ones, sort based on decimal value.\n",
            "changes": "SimilarOutput"
        },
        "id": 116,
        "signature": {
            "name": "sort_array",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_sort_array(self):\n        self.assertTrue(True)\n        self.assertTrue(sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n        self.assertTrue(sort_array([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n        self.assertTrue(sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n        self.assertTrue(sort_array([]) == [])\n        self.assertTrue(sort_array([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n        self.assertTrue(sort_array([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\n        self.assertTrue(sort_array([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n        self.assertTrue(sort_array([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.",
            "wuni": "Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]",
            "wuwi": "Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of the first n words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]",
            "nuwi": "Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of the first n words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\n",
            "changes": "PartialOutput"
        },
        "id": 117,
        "signature": {
            "name": "select_words",
            "returns": "",
            "params": [
                "s",
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_select_words(self):\n        self.assertTrue(select_words('Mary had a little lamb', 4) == ['little'])\n        self.assertTrue(select_words('Mary had a little lamb', 3) == ['Mary', 'lamb'])\n        self.assertTrue(select_words('simple white space', 2) == [])\n        self.assertTrue(select_words('Hello world', 4) == ['world'])\n        self.assertTrue(select_words('Uncle sam', 3) == ['Uncle'])\n        self.assertTrue(select_words('', 4) == [])\n        self.assertTrue(select_words('a b c d e f', 1) == ['b', 'c', 'd', 'f'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n",
            "wuni": "You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"",
            "wuwi": "You are given a word. Your task is to find the closest vowel that stands next \nto a consonant from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"",
            "nuwi": "You are given a word. Your task is to find the closest vowel that stands next \nto a consonant from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\n",
            "changes": "SimilarOutput"
        },
        "id": 118,
        "signature": {
            "name": "get_closest_vowel",
            "returns": "",
            "params": [
                "word"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_get_closest_vowel(self):\n        self.assertTrue(get_closest_vowel('yogurt') == 'u')\n        self.assertTrue(get_closest_vowel('full') == 'u')\n        self.assertTrue(get_closest_vowel('easy') == '')\n        self.assertTrue(get_closest_vowel('eAsy') == '')\n        self.assertTrue(get_closest_vowel('ali') == '')\n        self.assertTrue(get_closest_vowel('bad') == 'a')\n        self.assertTrue(get_closest_vowel('most') == 'o')\n        self.assertTrue(get_closest_vowel('ab') == '')\n        self.assertTrue(get_closest_vowel('ba') == '')\n        self.assertTrue(get_closest_vowel('quick') == '')\n        self.assertTrue(get_closest_vowel('anime') == 'i')\n        self.assertTrue(get_closest_vowel('Asia') == '')\n        self.assertTrue(get_closest_vowel('Above') == 'o')\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced.",
            "wuni": "You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'",
            "wuwi": "You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it both strings are  good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'",
            "nuwi": "You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it both strings are  good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. ",
            "changes": "Restrictive"
        },
        "id": 119,
        "signature": {
            "name": "match_parens",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def check(s):\n    val = 0\n    for i in s:\n        if i == '(':\n            val = val + 1\n        else:\n            val = val - 1\n        if val < 0:\n            return False\n    return True if val == 0 else False"
            ]
        },
        "code": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_match_parens(self):\n        self.assertTrue(match_parens(['()(', ')']) == 'Yes')\n        self.assertTrue(match_parens([')', ')']) == 'No')\n        self.assertTrue(match_parens(['(()(())', '())())']) == 'No')\n        self.assertTrue(match_parens([')())', '(()()(']) == 'Yes')\n        self.assertTrue(match_parens(['(())))', '(()())((']) == 'Yes')\n        self.assertTrue(match_parens(['()', '())']) == 'No')\n        self.assertTrue(match_parens(['(()(', '()))()']) == 'Yes')\n        self.assertTrue(match_parens(['((((', '((())']) == 'No')\n        self.assertTrue(match_parens([')(()', '(()(']) == 'No')\n        self.assertTrue(match_parens([')(', ')(']) == 'No')\n        self.assertTrue(match_parens(['(', ')']) == 'Yes')\n        self.assertTrue(match_parens([')', '(']) == 'Yes')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n",
            "wuni": "Given an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)",
            "wuwi": "Given an array arr of integers and a positive integer k, return a sorted list \nof length k with the minimum k numbers in arr.\n\nExample 1:\n\n    Input: arr = [-3, -4, 5], k = 3\n    Output: [-4, -3, 5]\n\nExample 2:\n\n    Input: arr = [4, -4, 4], k = 2\n    Output: [4, 4]\n\nExample 3:\n\n    Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    Output: [2]\n\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)",
            "nuwi": "Given an array arr of integers and a positive integer k, return a sorted list \nof length k with the minimum k numbers in arr.\n",
            "changes": "wild"
        },
        "id": 120,
        "signature": {
            "name": "maximum",
            "returns": "",
            "params": [
                "arr",
                "k"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_maximum(self):\n        self.assertTrue(maximum([-3, -4, 5], 3) == [-4, -3, 5])\n        self.assertTrue(maximum([4, -4, 4], 2) == [4, 4])\n        self.assertTrue(maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n        self.assertTrue(maximum([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n        self.assertTrue(maximum([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n        self.assertTrue(maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n        self.assertTrue(maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n        self.assertTrue(maximum([1, 0, 5, -7], 1) == [5])\n        self.assertTrue(maximum([4, -4], 2) == [-4, 4])\n        self.assertTrue(maximum([-10, 10], 2) == [-10, 10])\n        self.assertTrue(maximum([1, 2, 3, -23, 243, -400, 0], 0) == [])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n",
            "wuni": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0",
            "wuwi": "Given a non-empty list of integers, return the sum of all of the odd elements \n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0",
            "nuwi": "Given a non-empty list of integers, return the sum of all of the odd elements ",
            "changes": "SimilarOutput"
        },
        "id": 121,
        "signature": {
            "name": "solution",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_solution(self):\n        self.assertTrue(solution([5, 8, 7, 1]) == 12)\n        self.assertTrue(solution([3, 3, 3, 3, 3]) == 9)\n        self.assertTrue(solution([30, 13, 24, 321]) == 0)\n        self.assertTrue(solution([5, 9]) == 5)\n        self.assertTrue(solution([2, 4, 8]) == 0)\n        self.assertTrue(solution([30, 13, 23, 32]) == 23)\n        self.assertTrue(solution([3, 13, 2, 9]) == 3)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.",
            "wuni": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)",
            "wuwi": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with exactly two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)",
            "nuwi": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with exactly two digits from the first k elements of arr.",
            "changes": "ALS"
        },
        "id": 122,
        "signature": {
            "name": "add_elements",
            "returns": "",
            "params": [
                "arr",
                "k"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_add_elements(self):\n        self.assertTrue(add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n        self.assertTrue(add_elements([111, 121, 3, 4000, 5, 6], 2) == 0)\n        self.assertTrue(add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n        self.assertTrue(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n        self.assertTrue(add_elements([1], 1) == 1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n",
            "wuni": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.",
            "wuwi": "Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.",
            "nuwi": "Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n",
            "changes": "PartialOutput"
        },
        "id": 123,
        "signature": {
            "name": "get_odd_collatz",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_get_odd_collatz(self):\n        self.assertTrue(get_odd_collatz(14) == [1, 5, 7, 11, 13, 17])\n        self.assertTrue(get_odd_collatz(5) == [1, 5])\n        self.assertTrue(get_odd_collatz(12) == [1, 3, 5])\n        self.assertTrue(get_odd_collatz(1) == [1])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n",
            "wuni": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False",
            "wuwi": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: dd-mm-yyyy\n\nfor example: \nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False",
            "nuwi": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: dd-mm-yyyy\n",
            "changes": "different format"
        },
        "id": 124,
        "signature": {
            "name": "valid_date",
            "returns": "",
            "params": [
                "date"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_valid_date(self):\n        self.assertTrue(valid_date('03-11-2000') == True)\n        self.assertTrue(valid_date('15-01-2012') == False)\n        self.assertTrue(valid_date('04-0-2040') == False)\n        self.assertTrue(valid_date('06-04-2020') == True)\n        self.assertTrue(valid_date('01-01-2007') == True)\n        self.assertTrue(valid_date('03-32-2011') == False)\n        self.assertTrue(valid_date('') == False)\n        self.assertTrue(valid_date('04-31-3000') == False)\n        self.assertTrue(valid_date('06-06-2005') == True)\n        self.assertTrue(valid_date('21-31-2000') == False)\n        self.assertTrue(valid_date('04-12-2003') == True)\n        self.assertTrue(valid_date('04122003') == False)\n        self.assertTrue(valid_date('20030412') == False)\n        self.assertTrue(valid_date('2003-04') == False)\n        self.assertTrue(valid_date('2003-04-12') == False)\n        self.assertTrue(valid_date('04-2003') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n",
            "wuni": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3 ",
            "wuwi": "Given a string of words, return a list of lengths of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3 ",
            "nuwi": "Given a string of words, return a list of lengths of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n",
            "changes": "returntype"
        },
        "id": 125,
        "signature": {
            "name": "split_words",
            "returns": "",
            "params": [
                "txt"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_split_words(self):\n        self.assertTrue(split_words('Hello world!') == ['Hello', 'world!'])\n        self.assertTrue(split_words('Hello,world!') == ['Hello', 'world!'])\n        self.assertTrue(split_words('Hello world,!') == ['Hello', 'world,!'])\n        self.assertTrue(split_words('Hello,Hello,world !') == ['Hello,Hello,world', '!'])\n        self.assertTrue(split_words('abcdef') == 3)\n        self.assertTrue(split_words('aaabb') == 2)\n        self.assertTrue(split_words('aaaBb') == 1)\n        self.assertTrue(split_words('') == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n",
            "wuni": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
            "wuwi": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return True. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False",
            "nuwi": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return True. Assume no negative numbers and only integers.\n",
            "changes": "ALS"
        },
        "id": 126,
        "signature": {
            "name": "is_sorted",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_sorted(self):\n        self.assertTrue(is_sorted([5]) == True)\n        self.assertTrue(is_sorted([1, 2, 3, 4, 5]) == True)\n        self.assertTrue(is_sorted([1, 3, 2, 4, 5]) == False)\n        self.assertTrue(is_sorted([1, 2, 3, 4, 5, 6]) == True)\n        self.assertTrue(is_sorted([1, 2, 3, 4, 5, 6, 7]) == True)\n        self.assertTrue(is_sorted([1, 3, 2, 4, 5, 6, 7]) == False)\n        self.assertTrue(is_sorted([]) == True)\n        self.assertTrue(is_sorted([1]) == True)\n        self.assertTrue(is_sorted([3, 2, 1]) == False)\n        self.assertTrue(is_sorted([1, 2, 2, 2, 3, 4]) == False)\n        self.assertTrue(is_sorted([1, 2, 3, 3, 3, 4]) == False)\n        self.assertTrue(is_sorted([1, 2, 2, 3, 3, 4]) == True)\n        self.assertTrue(is_sorted([1, 2, 3, 4]) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n",
            "wuni": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"",
            "wuwi": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a odd number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"",
            "nuwi": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a odd number.",
            "changes": "Extensive"
        },
        "id": 127,
        "signature": {
            "name": "intersection",
            "returns": "",
            "params": [
                "interval1",
                "interval2"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def is_prime(num):\n    if num == 1 or num == 0:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
            ]
        },
        "code": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_intersection(self):\n        self.assertTrue(intersection((1, 2), (2, 3)) == 'NO')\n        self.assertTrue(intersection((-1, 1), (0, 4)) == 'NO')\n        self.assertTrue(intersection((-3, -1), (-5, 5)) == 'YES')\n        self.assertTrue(intersection((-2, 2), (-4, 0)) == 'YES')\n        self.assertTrue(intersection((-11, 2), (-1, -1)) == 'NO')\n        self.assertTrue(intersection((1, 2), (3, 5)) == 'NO')\n        self.assertTrue(intersection((1, 2), (1, 2)) == 'NO')\n        self.assertTrue(intersection((-2, -2), (-3, -2)) == 'NO')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\n",
            "wuni": "You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None",
            "wuwi": "You are given an array arr of integers and you need to return\nsum of all integers in the array.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None",
            "nuwi": "You are given an array arr of integers and you need to return\nsum of all integers in the array.\nNote: return None for empty arr.\n",
            "changes": "SimilarOutput"
        },
        "id": 128,
        "signature": {
            "name": "prod_signs",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_prod_signs(self):\n        self.assertTrue(True)\n        self.assertTrue(prod_signs([1, 2, 2, -4]) == -9)\n        self.assertTrue(prod_signs([0, 1]) == 0)\n        self.assertTrue(prod_signs([1, 1, 1, 2, 3, -1, 1]) == -10)\n        self.assertTrue(prod_signs([]) == None)\n        self.assertTrue(prod_signs([2, 4, 1, 2, -1, -1, 9]) == 20)\n        self.assertTrue(prod_signs([-1, 1, -1, 1]) == 4)\n        self.assertTrue(prod_signs([-1, 1, 1, 1]) == -4)\n        self.assertTrue(prod_signs([-1, 1, 1, 0]) == 0)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n",
            "wuni": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]",
            "wuwi": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [-N*N, N * N]\ninclusive appears at maximum once on the cells of the grid.\n\nYou have to find the minimum path of at least length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]",
            "nuwi": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [-N*N, N * N]\ninclusive appears at maximum once on the cells of the grid.\n\nYou have to find the minimum path of at least length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n",
            "changes": "ALS"
        },
        "id": 129,
        "signature": {
            "name": "minPath",
            "returns": "",
            "params": [
                "grid",
                "k"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_minPath(self):\n        print\n        self.assertTrue(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1])\n        self.assertTrue(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1])\n        self.assertTrue(minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2])\n        self.assertTrue(minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1])\n        self.assertTrue(minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1])\n        self.assertTrue(minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1])\n        self.assertTrue(minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n        self.assertTrue(minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3])\n        self.assertTrue(minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5])\n        self.assertTrue(minPath([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n        self.assertTrue(minPath([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\n",
            "wuni": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]",
            "wuwi": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]",
            "nuwi": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n numbers of the Tribonacci sequence",
            "changes": "PartialOutput"
        },
        "id": 130,
        "signature": {
            "name": "tri",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_tri(self):\n        self.assertTrue(tri(3) == [1, 3, 2.0, 8.0])\n        self.assertTrue(tri(4) == [1, 3, 2.0, 8.0, 3.0])\n        self.assertTrue(tri(5) == [1, 3, 2.0, 8.0, 3.0, 15.0])\n        self.assertTrue(tri(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n        self.assertTrue(tri(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n        self.assertTrue(tri(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n        self.assertTrue(tri(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n        self.assertTrue(tri(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0])\n        self.assertTrue(tri(0) == [1])\n        self.assertTrue(tri(1) == [1, 3])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\n",
            "wuni": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15",
            "wuwi": "Given a positive integer n, return the product of the prime digits.\nReturn 0 if there are none.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15",
            "nuwi": "Given a positive integer n, return the product of the prime digits.\nReturn 0 if there are none.\n",
            "changes": "PartialOutput"
        },
        "id": 131,
        "signature": {
            "name": "digits",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_digits(self):\n        self.assertTrue(digits(5) == 5)\n        self.assertTrue(digits(54) == 5)\n        self.assertTrue(digits(120) == 1)\n        self.assertTrue(digits(5014) == 5)\n        self.assertTrue(digits(98765) == 315)\n        self.assertTrue(digits(5576543) == 2625)\n        self.assertTrue(digits(2468) == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n",
            "wuni": "Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True",
            "wuwi": "Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere exactly one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True",
            "nuwi": "Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere exactly one bracket in the subsequence is nested.\n",
            "changes": "ALS"
        },
        "id": 132,
        "signature": {
            "name": "is_nested",
            "returns": "",
            "params": [
                "string"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_nested(self):\n        self.assertTrue(is_nested('[[]]') == True)\n        self.assertTrue(is_nested('[]]]]]]][[[[[]') == False)\n        self.assertTrue(is_nested('[][]') == False)\n        self.assertTrue(is_nested('[]') == False)\n        self.assertTrue(is_nested('[[[[]]]]') == True)\n        self.assertTrue(is_nested('[]]]]]]]]]]') == False)\n        self.assertTrue(is_nested('[][][[]]') == True)\n        self.assertTrue(is_nested('[[]') == False)\n        self.assertTrue(is_nested('[]]') == False)\n        self.assertTrue(is_nested('[[]][[') == True)\n        self.assertTrue(is_nested('[[][]]') == True)\n        self.assertTrue(is_nested('') == False)\n        self.assertTrue(is_nested('[[[[[[[[') == False)\n        self.assertTrue(is_nested(']]]]]]]]') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\n",
            "wuni": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6",
            "wuwi": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6",
            "nuwi": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list first.",
            "changes": "precision"
        },
        "id": 133,
        "signature": {
            "name": "sum_squares",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import math"
            ],
            "other_methods": []
        },
        "code": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_sum_squares(self):\n        self.assertTrue(sum_squares([1, 2, 3]) == 14)\n        self.assertTrue(sum_squares([1.0, 2, 3]) == 14)\n        self.assertTrue(sum_squares([1, 3, 5, 7]) == 84)\n        self.assertTrue(sum_squares([1.4, 4.2, 0]) == 29)\n        self.assertTrue(sum_squares([-2.4, 1, 1]) == 6)\n        self.assertTrue(sum_squares([100, 1, 15, 2]) == 10230)\n        self.assertTrue(sum_squares([10000, 10000]) == 200000000)\n        self.assertTrue(sum_squares([-1.4, 4.6, 6.3]) == 75)\n        self.assertTrue(sum_squares([-1.4, 17.9, 18.9, 19.9]) == 1086)\n        self.assertTrue(sum_squares([0]) == 0)\n        self.assertTrue(sum_squares([-1]) == 1)\n        self.assertTrue(sum_squares([-1, 1, 0]) == 2)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n",
            "wuni": "Create a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False ",
            "wuwi": "Create a function that returns True if the last character\nof a given string is an alphabeticalnumerical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False ",
            "nuwi": "Create a function that returns True if the last character\nof a given string is an alphabeticalnumerical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n",
            "changes": "Extensive"
        },
        "id": 134,
        "signature": {
            "name": "check_if_last_char_is_a_letter",
            "returns": "",
            "params": [
                "txt"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_check_if_last_char_is_a_letter(self):\n        self.assertTrue(check_if_last_char_is_a_letter('apple') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('apple pi e') == True)\n        self.assertTrue(check_if_last_char_is_a_letter('eeeee') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('A') == True)\n        self.assertTrue(check_if_last_char_is_a_letter('Pumpkin pie ') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('Pumpkin pie 1') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('eeeee e ') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('apple pie') == False)\n        self.assertTrue(check_if_last_char_is_a_letter('apple pi e ') == False)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n",
            "wuni": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1",
            "wuwi": "Create a function which returns the largest index of an element which\nis not greater than to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1",
            "nuwi": "Create a function which returns the largest index of an element which\nis not greater than to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n",
            "changes": "ALS"
        },
        "id": 135,
        "signature": {
            "name": "can_arrange",
            "returns": "",
            "params": [
                "arr"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_can_arrange(self):\n        self.assertTrue(can_arrange([1, 2, 4, 3, 5]) == 3)\n        self.assertTrue(can_arrange([1, 2, 4, 5]) == -1)\n        self.assertTrue(can_arrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n        self.assertTrue(can_arrange([4, 8, 5, 7, 3]) == 4)\n        self.assertTrue(can_arrange([]) == -1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n",
            "wuni": "Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)",
            "wuwi": "Create a function that returns a tuple (b, a), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)",
            "nuwi": "Create a function that returns a tuple (b, a), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n",
            "changes": "FlippedOutput"
        },
        "id": 136,
        "signature": {
            "name": "largest_smallest_integers",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_largest_smallest_integers(self):\n        self.assertTrue(largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1))\n        self.assertTrue(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1))\n        self.assertTrue(largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n        self.assertTrue(largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n        self.assertTrue(largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n        self.assertTrue(largest_smallest_integers([]) == (None, None))\n        self.assertTrue(largest_smallest_integers([0]) == (None, None))\n        self.assertTrue(largest_smallest_integers([-1, -3, -5, -6]) == (-1, None))\n        self.assertTrue(largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None))\n        self.assertTrue(largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1))\n        self.assertTrue(largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1))\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\n",
            "wuni": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None",
            "wuwi": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn the first if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None",
            "nuwi": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn the first if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,",
            "changes": "returntype"
        },
        "id": 137,
        "signature": {
            "name": "compare_one",
            "returns": "",
            "params": [
                "a",
                "b"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_compare_one(self):\n        self.assertTrue(compare_one(1, 2) == 2)\n        self.assertTrue(compare_one(1, 2.5) == 2.5)\n        self.assertTrue(compare_one(2, 3) == 3)\n        self.assertTrue(compare_one(5, 6) == 6)\n        self.assertTrue(compare_one(1, '2,3') == '2,3')\n        self.assertTrue(compare_one('5,1', '6') == '6')\n        self.assertTrue(compare_one('1', '2') == '2')\n        self.assertTrue(compare_one('1', 1) == None)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n",
            "wuni": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True",
            "wuwi": "Evaluate whether the given number n can be written as the sum of at least 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True",
            "nuwi": "Evaluate whether the given number n can be written as the sum of at least 4 positive even numbers\n",
            "changes": "ALS"
        },
        "id": 138,
        "signature": {
            "name": "is_equal_to_sum_even",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return n%2 == 0 and n >= 8\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_is_equal_to_sum_even(self):\n        self.assertTrue(is_equal_to_sum_even(4) == False)\n        self.assertTrue(is_equal_to_sum_even(6) == False)\n        self.assertTrue(is_equal_to_sum_even(8) == True)\n        self.assertTrue(is_equal_to_sum_even(10) == True)\n        self.assertTrue(is_equal_to_sum_even(11) == False)\n        self.assertTrue(is_equal_to_sum_even(12) == True)\n        self.assertTrue(is_equal_to_sum_even(13) == False)\n        self.assertTrue(is_equal_to_sum_even(16) == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
            "wuni": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
            "wuwi": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-2)! * (n-4)! * ... * 1! or ...*2!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
            "nuwi": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-2)! * (n-4)! * ... * 1! or ...*2!\nwhere n > 0\n",
            "changes": "wild"
        },
        "id": 139,
        "signature": {
            "name": "special_factorial",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_special_factorial(self):\n        self.assertTrue(special_factorial(4) == 288)\n        self.assertTrue(special_factorial(5) == 34560)\n        self.assertTrue(special_factorial(7) == 125411328000)\n        self.assertTrue(special_factorial(1) == 1)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\n",
            "wuni": "Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"",
            "wuwi": "Given a string text, replace all spaces in it with underscores, \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"",
            "nuwi": "Given a string text, replace all spaces in it with underscores, \n",
            "changes": "SimilarOutput"
        },
        "id": 140,
        "signature": {
            "name": "fix_spaces",
            "returns": "",
            "params": [
                "text"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_fix_spaces(self):\n        self.assertTrue(fix_spaces('Example') == 'Example')\n        self.assertTrue(fix_spaces('Mudasir Hanif ') == 'Mudasir_Hanif_')\n        self.assertTrue(fix_spaces('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow')\n        self.assertTrue(fix_spaces('Exa   mple') == 'Exa-mple')\n        self.assertTrue(fix_spaces('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n",
            "wuni": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)",
            "wuwi": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains at least one dot '.'\n- The substring before the last dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the last dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)",
            "nuwi": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains at least one dot '.'\n- The substring before the last dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the last dot should be one of these: ['txt', 'exe', 'dll']",
            "changes": "ALS"
        },
        "id": 141,
        "signature": {
            "name": "file_name_check",
            "returns": "",
            "params": [
                "file_name"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_file_name_check(self):\n        self.assertTrue(file_name_check('example.txt') == 'Yes')\n        self.assertTrue(file_name_check('1example.dll') == 'No')\n        self.assertTrue(file_name_check('s1sdf3.asd') == 'No')\n        self.assertTrue(file_name_check('K.dll') == 'Yes')\n        self.assertTrue(file_name_check('MY16FILE3.exe') == 'Yes')\n        self.assertTrue(file_name_check('His12FILE94.exe') == 'No')\n        self.assertTrue(file_name_check('_Y.txt') == 'No')\n        self.assertTrue(file_name_check('?aREYA.exe') == 'No')\n        self.assertTrue(file_name_check('/this_is_valid.dll') == 'No')\n        self.assertTrue(file_name_check('this_is_valid.wow') == 'No')\n        self.assertTrue(file_name_check('this_is_valid.txt') == 'Yes')\n        self.assertTrue(file_name_check('this_is_valid.txtexe') == 'No')\n        self.assertTrue(file_name_check('#this2_i4s_5valid.ten') == 'No')\n        self.assertTrue(file_name_check('@this1_is6_valid.exe') == 'No')\n        self.assertTrue(file_name_check('this_is_12valid.6exe4.txt') == 'No')\n        self.assertTrue(file_name_check('all.exe.txt') == 'No')\n        self.assertTrue(file_name_check('I563_No.exe') == 'Yes')\n        self.assertTrue(file_name_check('Is3youfault.txt') == 'Yes')\n        self.assertTrue(file_name_check('no_one#knows.dll') == 'Yes')\n        self.assertTrue(file_name_check('1I563_Yes3.exe') == 'No')\n        self.assertTrue(file_name_check('I563_Yes3.txtt') == 'No')\n        self.assertTrue(file_name_check('final..txt') == 'No')\n        self.assertTrue(file_name_check('final132') == 'No')\n        self.assertTrue(file_name_check('_f4indsartal132.') == 'No')\n        self.assertTrue(file_name_check('.txt') == 'No')\n        self.assertTrue(file_name_check('s.') == 'No')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n",
            "wuni": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126",
            "wuwi": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and if it is both then its the product of the result of both rules. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126",
            "nuwi": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and if it is both then its the product of the result of both rules. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
            "changes": "SimilarOutput"
        },
        "id": 142,
        "signature": {
            "name": "sum_squares",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_sum_squares(self):\n        self.assertTrue(sum_squares([1, 2, 3]) == 6)\n        self.assertTrue(sum_squares([1, 4, 9]) == 14)\n        self.assertTrue(sum_squares([]) == 0)\n        self.assertTrue(sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n        self.assertTrue(sum_squares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n        self.assertTrue(sum_squares([0]) == 0)\n        self.assertTrue(sum_squares([-1, -5, 2, -1, -5]) == -126)\n        self.assertTrue(sum_squares([-56, -99, 1, 0, -2]) == 3030)\n        self.assertTrue(sum_squares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n        self.assertTrue(sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n        self.assertTrue(sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n",
            "wuni": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters",
            "wuwi": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are odd numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters",
            "nuwi": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are odd numbers,\nthe order of the words in the new string should be the same as the original one.\n",
            "changes": "Extensive"
        },
        "id": 143,
        "signature": {
            "name": "words_in_sentence",
            "returns": "",
            "params": [
                "sentence"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_words_in_sentence(self):\n        self.assertTrue(words_in_sentence('This is a test') == 'is')\n        self.assertTrue(words_in_sentence('lets go for swimming') == 'go for')\n        self.assertTrue(words_in_sentence('there is no place available here') == 'there is no place')\n        self.assertTrue(words_in_sentence('Hi I am Hussein') == 'Hi am Hussein')\n        self.assertTrue(words_in_sentence('go for it') == 'go for it')\n        self.assertTrue(words_in_sentence('here') == '')\n        self.assertTrue(words_in_sentence('here is') == 'is')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n",
            "wuni": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False",
            "wuwi": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole odd number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False",
            "nuwi": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole odd number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n",
            "changes": "Restrictive"
        },
        "id": 144,
        "signature": {
            "name": "simplify",
            "returns": "",
            "params": [
                "x",
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_simplify(self):\n        self.assertTrue(simplify('1/5', '5/1') == True)\n        self.assertTrue(simplify('1/6', '2/1') == False)\n        self.assertTrue(simplify('5/1', '3/1') == True)\n        self.assertTrue(simplify('7/10', '10/2') == False)\n        self.assertTrue(simplify('2/10', '50/10') == True)\n        self.assertTrue(simplify('7/2', '4/2') == True)\n        self.assertTrue(simplify('11/6', '6/1') == True)\n        self.assertTrue(simplify('2/3', '5/2') == False)\n        self.assertTrue(simplify('5/2', '3/5') == False)\n        self.assertTrue(simplify('2/4', '8/4') == True)\n        self.assertTrue(simplify('2/4', '4/2') == True)\n        self.assertTrue(simplify('1/5', '5/1') == True)\n        self.assertTrue(simplify('1/5', '1/5') == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n",
            "wuni": "Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []",
            "wuwi": "Write a function which sorts the given list of integers\nin ascending order according to the product of their digits.\nNote: if there are several items with similar product of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []",
            "nuwi": "Write a function which sorts the given list of integers\nin ascending order according to the product of their digits.\nNote: if there are several items with similar product of their digits,\norder them based on their index in original list.\n",
            "changes": "wild"
        },
        "id": 145,
        "signature": {
            "name": "order_by_points",
            "returns": "",
            "params": [
                "nums"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": [
                "def digits_sum(n):\n    neg = 1\n    if n < 0:\n        n, neg = (-1 * n, -1)\n    n = [int(i) for i in str(n)]\n    n[0] = n[0] * neg\n    return sum(n)"
            ]
        },
        "code": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_order_by_points(self):\n        self.assertTrue(order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n        self.assertTrue(order_by_points([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n        self.assertTrue(order_by_points([]) == [])\n        self.assertTrue(order_by_points([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n        self.assertTrue(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n        self.assertTrue(order_by_points([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n",
            "wuni": "Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2",
            "wuwi": "Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2",
            "nuwi": "Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and last digits of a number are odd (1, 3, 5, 7, 9).\n",
            "changes": "TooMuch"
        },
        "id": 146,
        "signature": {
            "name": "specialFilter",
            "returns": "",
            "params": [
                "nums"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_specialFilter(self):\n        self.assertTrue(specialFilter([5, -2, 1, -5]) == 0)\n        self.assertTrue(specialFilter([15, -73, 14, -15]) == 1)\n        self.assertTrue(specialFilter([33, -2, -3, 45, 21, 109]) == 2)\n        self.assertTrue(specialFilter([43, -12, 93, 125, 121, 109]) == 4)\n        self.assertTrue(specialFilter([71, -2, -33, 75, 21, 19]) == 3)\n        self.assertTrue(specialFilter([1]) == 0)\n        self.assertTrue(specialFilter([]) == 0)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\n",
            "wuni": "You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).",
            "wuwi": "You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 6.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).",
            "nuwi": "You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 6.\n",
            "changes": "PartialOutput"
        },
        "id": 147,
        "signature": {
            "name": "get_max_triples",
            "returns": "",
            "params": [
                "n"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_get_max_triples(self):\n        self.assertTrue(get_max_triples(5) == 1)\n        self.assertTrue(get_max_triples(6) == 4)\n        self.assertTrue(get_max_triples(10) == 36)\n        self.assertTrue(get_max_triples(100) == 53361)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \n",
            "wuni": "There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
            "wuwi": "There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, including themself, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
            "nuwi": "There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, including themself, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \n",
            "changes": "TooMuch"
        },
        "id": 148,
        "signature": {
            "name": "bf",
            "returns": "",
            "params": [
                "planet1",
                "planet2"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_bf(self):\n        self.assertTrue(bf('Jupiter', 'Neptune') == ('Saturn', 'Uranus'))\n        self.assertTrue(bf('Earth', 'Mercury') == ('Venus',))\n        self.assertTrue(bf('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'))\n        self.assertTrue(bf('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'))\n        self.assertTrue(bf('Earth', 'Earth') == ())\n        self.assertTrue(bf('Mars', 'Earth') == ())\n        self.assertTrue(bf('Jupiter', 'Makemake') == ())",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\n",
            "wuni": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]",
            "wuwi": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd but not prime lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]",
            "nuwi": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd but not prime lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\n",
            "changes": "TooMuch"
        },
        "id": 149,
        "signature": {
            "name": "sorted_list_sum",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_sorted_list_sum(self):\n        self.assertTrue(sorted_list_sum(['aa', 'a', 'aaa']) == ['aa'])\n        self.assertTrue(sorted_list_sum(['school', 'AI', 'asdf', 'b']) == ['AI', 'asdf', 'school'])\n        self.assertTrue(sorted_list_sum(['d', 'b', 'c', 'a']) == [])\n        self.assertTrue(sorted_list_sum(['d', 'dcba', 'abcd', 'a']) == ['abcd', 'dcba'])\n        self.assertTrue(sorted_list_sum(['AI', 'ai', 'au']) == ['AI', 'ai', 'au'])\n        self.assertTrue(sorted_list_sum(['a', 'b', 'b', 'c', 'c', 'a']) == [])\n        self.assertTrue(sorted_list_sum(['aaaa', 'bbbb', 'dd', 'cc']) == ['cc', 'dd', 'aaaa', 'bbbb'])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n",
            "wuni": "A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5",
            "wuwi": "A simple program which should return the value of x if n is \na odd prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5",
            "nuwi": "A simple program which should return the value of x if n is \na odd prime number and should return the value of y otherwise.\n",
            "changes": "SimilarOutput"
        },
        "id": 150,
        "signature": {
            "name": "x_or_y",
            "returns": "",
            "params": [
                "n",
                "x",
                "y"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_x_or_y(self):\n        self.assertTrue(x_or_y(7, 34, 12) == 34)\n        self.assertTrue(x_or_y(15, 8, 5) == 5)\n        self.assertTrue(x_or_y(3, 33, 5212) == 33)\n        self.assertTrue(x_or_y(1259, 3, 52) == 3)\n        self.assertTrue(x_or_y(7919, -1, 12) == -1)\n        self.assertTrue(x_or_y(3609, 1245, 583) == 583)\n        self.assertTrue(x_or_y(91, 56, 129) == 129)\n        self.assertTrue(x_or_y(6, 34, 1234) == 1234)\n        self.assertTrue(x_or_y(1, 2, 0) == 0)\n        self.assertTrue(x_or_y(2, 2, 0) == 2)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n",
            "wuni": "Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0  \n\nIf the input list is empty, return 0.",
            "wuwi": "Given a list of numbers, return the sum of squares of the numbers\nin the list. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0  \n\nIf the input list is empty, return 0.",
            "nuwi": "Given a list of numbers, return the sum of squares of the numbers\nin the list. Ignore numbers that are negative or not integers.",
            "changes": "TooMuch"
        },
        "id": 151,
        "signature": {
            "name": "double_the_difference",
            "returns": "",
            "params": [
                "lst"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_double_the_difference(self):\n        self.assertTrue(double_the_difference([]) == 0)\n        self.assertTrue(double_the_difference([5, 4]) == 25)\n        self.assertTrue(double_the_difference([0.1, 0.2, 0.3]) == 0)\n        self.assertTrue(double_the_difference([-10, -20, -30]) == 0)\n        self.assertTrue(double_the_difference([-1, -2, 8]) == 0)\n        self.assertTrue(double_the_difference([0.2, 3, 5]) == 34)\n        lst = list(range(-99, 100, 2))\n        odd_sum = sum([i ** 2 for i in lst if i % 2 != 0 and i > 0])\n        self.assertTrue(double_the_difference(lst) == odd_sum)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n",
            "wuni": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]",
            "wuwi": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]",
            "nuwi": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the difference between the guess and the score.",
            "changes": "ABS"
        },
        "id": 152,
        "signature": {
            "name": "compare",
            "returns": "",
            "params": [
                "game",
                "guess"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_compare(self):\n        self.assertTrue(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n        self.assertTrue(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n        self.assertTrue(compare([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n        self.assertTrue(compare([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\n",
            "wuni": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
            "wuwi": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
            "nuwi": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.",
            "changes": "SimilarOutput"
        },
        "id": 153,
        "signature": {
            "name": "Strongest_Extension",
            "returns": "",
            "params": [
                "class_name",
                "extensions"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_Strongest_Extension(self):\n        self.assertTrue(Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe')\n        self.assertTrue(Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe')\n        self.assertTrue(Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__')\n        self.assertTrue(Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR')\n        self.assertTrue(Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123')\n        self.assertTrue(Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123')\n        self.assertTrue(Strongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW')\n        self.assertTrue(Strongest_Extension('_', ['Bb', '91245']) == '_.Bb')\n        self.assertTrue(Strongest_Extension('Sp', ['671235', 'Bb']) == 'Sp.671235')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n",
            "wuni": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True",
            "wuwi": "You are given 2 words. You need to return True if the second word is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True",
            "nuwi": "You are given 2 words. You need to return True if the second word is a substring in the first word\n",
            "changes": "Restrictive"
        },
        "id": 154,
        "signature": {
            "name": "cycpattern_check",
            "returns": "",
            "params": [
                "a",
                "b"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_cycpattern_check(self):\n        self.assertTrue(cycpattern_check('xyzw', 'xyw') == False)\n        self.assertTrue(cycpattern_check('yello', 'ell') == True)\n        self.assertTrue(cycpattern_check('whattup', 'ptut') == False)\n        self.assertTrue(cycpattern_check('efef', 'fee') == True)\n        self.assertTrue(cycpattern_check('abab', 'aabb') == False)\n        self.assertTrue(cycpattern_check('winemtt', 'tinem') == True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n",
            "wuni": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\nExample:\n   even_odd_count(-12) ==> (1, 1)\n   even_odd_count(123) ==> (1, 2)",
            "wuwi": "Given an integer. return a tuple that has the number of even and odd digits in the hexadecimal representation respectively.\n\nExample:\n   even_odd_count(-12) ==> (1, 1)\n   even_odd_count(123) ==> (1, 2)",
            "nuwi": "Given an integer. return a tuple that has the number of even and odd digits in the hexadecimal representation respectively.",
            "changes": "SimilarOutput"
        },
        "id": 155,
        "signature": {
            "name": "even_odd_count",
            "returns": "",
            "params": [
                "num"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_even_odd_count(self):\n        self.assertTrue(even_odd_count(7) == (0, 1))\n        self.assertTrue(even_odd_count(-78) == (1, 1))\n        self.assertTrue(even_odd_count(3452) == (2, 2))\n        self.assertTrue(even_odd_count(346211) == (3, 3))\n        self.assertTrue(even_odd_count(-345821) == (3, 3))\n        self.assertTrue(even_odd_count(-2) == (1, 0))\n        self.assertTrue(even_odd_count(-45347) == (2, 3))\n        self.assertTrue(even_odd_count(0) == (1, 0))\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n",
            "wuni": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'",
            "wuwi": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'",
            "nuwi": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions: 1 <= num <= 1000\n",
            "changes": "case"
        },
        "id": 156,
        "signature": {
            "name": "int_to_mini_roman",
            "returns": "",
            "params": [
                "number"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_int_to_mini_roman(self):\n        self.assertTrue(int_to_mini_roman(19) == 'xix')\n        self.assertTrue(int_to_mini_roman(152) == 'clii')\n        self.assertTrue(int_to_mini_roman(251) == 'ccli')\n        self.assertTrue(int_to_mini_roman(426) == 'cdxxvi')\n        self.assertTrue(int_to_mini_roman(500) == 'd')\n        self.assertTrue(int_to_mini_roman(1) == 'i')\n        self.assertTrue(int_to_mini_roman(4) == 'iv')\n        self.assertTrue(int_to_mini_roman(43) == 'xliii')\n        self.assertTrue(int_to_mini_roman(90) == 'xc')\n        self.assertTrue(int_to_mini_roman(94) == 'xciv')\n        self.assertTrue(int_to_mini_roman(532) == 'dxxxii')\n        self.assertTrue(int_to_mini_roman(900) == 'cm')\n        self.assertTrue(int_to_mini_roman(994) == 'cmxciv')\n        self.assertTrue(int_to_mini_roman(1000) == 'm')\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\n",
            "wuni": "Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False",
            "wuwi": "Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is at least \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False",
            "nuwi": "Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is at least \n90 degree.",
            "changes": "Extensive"
        },
        "id": 157,
        "signature": {
            "name": "right_angle_triangle",
            "returns": "",
            "params": [
                "a",
                "b",
                "c"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_right_angle_triangle(self):\n        self.assertTrue(right_angle_triangle(3, 4, 5) == True)\n        self.assertTrue(right_angle_triangle(1, 2, 3) == False)\n        self.assertTrue(right_angle_triangle(10, 6, 8) == True)\n        self.assertTrue(right_angle_triangle(2, 2, 2) == False)\n        self.assertTrue(right_angle_triangle(7, 24, 25) == True)\n        self.assertTrue(right_angle_triangle(10, 5, 7) == False)\n        self.assertTrue(right_angle_triangle(5, 12, 13) == True)\n        self.assertTrue(right_angle_triangle(15, 8, 17) == True)\n        self.assertTrue(right_angle_triangle(48, 55, 73) == True)\n        self.assertTrue(right_angle_triangle(1, 1, 1) == False)\n        self.assertTrue(right_angle_triangle(2, 2, 10) == False)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\n",
            "wuni": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"",
            "wuwi": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes last in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"",
            "nuwi": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes last in lexicographical order.\n",
            "changes": "SimilarOutput"
        },
        "id": 158,
        "signature": {
            "name": "find_max",
            "returns": "",
            "params": [
                "words"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_find_max(self):\n        self.assertTrue(find_max(['name', 'of', 'string']) == 'string')\n        self.assertTrue(find_max(['name', 'enam', 'game']) == 'enam')\n        self.assertTrue(find_max(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa')\n        self.assertTrue(find_max(['abc', 'cba']) == 'abc')\n        self.assertTrue(find_max(['play', 'this', 'game', 'of', 'footbott']) == 'footbott')\n        self.assertTrue(find_max(['we', 'are', 'gonna', 'rock']) == 'gonna')\n        self.assertTrue(find_max(['we', 'are', 'a', 'mad', 'nation']) == 'nation')\n        self.assertTrue(find_max(['this', 'is', 'a', 'prrk']) == 'this')\n        self.assertTrue(find_max(['b']) == 'b')\n        self.assertTrue(find_max(['play', 'play', 'play']) == 'play')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n",
            "wuni": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)",
            "wuwi": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will take a loan and even eat more carrots then existed, to not be hungry, creating negative leftover meals.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)",
            "nuwi": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will take a loan and even eat more carrots then existed, to not be hungry, creating negative leftover meals.\n",
            "changes": "SimilarOutput"
        },
        "id": 159,
        "signature": {
            "name": "eat",
            "returns": "",
            "params": [
                "number",
                "need",
                "remaining"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_eat(self):\n        self.assertTrue(True)\n        self.assertTrue(eat(5, 6, 10) == [11, 4])\n        self.assertTrue(eat(4, 8, 9) == [12, 1])\n        self.assertTrue(eat(1, 10, 10) == [11, 0])\n        self.assertTrue(eat(2, 11, 5) == [7, 0])\n        self.assertTrue(True)\n        self.assertTrue(eat(4, 5, 7) == [9, 2])\n        self.assertTrue(eat(4, 5, 1) == [5, 0])",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n",
            "wuni": "Given two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.",
            "wuwi": "Given two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the string representation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator list is equal to the length of operand list minus one.\n    Operand is a list of of non-negative integers.\n    Operator list has at least one operator, and operand list has at least two operands.",
            "nuwi": "Given two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the string representation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n",
            "changes": "returntype"
        },
        "id": 160,
        "signature": {
            "name": "do_algebra",
            "returns": "",
            "params": [
                "operator",
                "operand"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_do_algebra(self):\n        self.assertTrue(do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37)\n        self.assertTrue(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9)\n        self.assertTrue(do_algebra(['//', '*'], [7, 3, 4]) == 8)\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\n",
            "wuni": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"",
            "wuwi": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"",
            "nuwi": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"",
            "changes": "case"
        },
        "id": 161,
        "signature": {
            "name": "solve",
            "returns": "",
            "params": [
                "s"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },                                                         
        "code": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_solve(self):\n        self.assertTrue(solve('AsDf') == 'aSdF')\n        self.assertTrue(solve('1234') == '4321')\n        self.assertTrue(solve('ab') == 'AB')\n        self.assertTrue(solve('#a@C') == '#A@c')\n        self.assertTrue(solve('#AsdfW^45') == '#aSDFw^45')\n        self.assertTrue(solve('#6@2') == '2@6#')\n        self.assertTrue(solve('#$a^D') == '#$A^d')\n        self.assertTrue(solve('#ccc') == '#CCC')",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n",
            "wuni": "Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
            "wuwi": "Given a string 'text', return its sha-1 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
            "nuwi": "Given a string 'text', return its sha-1 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n",
            "changes": "wild"
        },
        "id": 162,
        "signature": {
            "name": "string_to_md5",
            "returns": "",
            "params": [
                "text"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [
                "import hashlib"
            ],
            "other_methods": []
        },
        "code": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_string_to_md5(self):\n        self.assertTrue(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')\n        self.assertTrue(string_to_md5('') == None)\n        self.assertTrue(string_to_md5('A B C') == '0ef78513b0cb8cef12743f5aeb35f888')\n        self.assertTrue(string_to_md5('password') == '5f4dcc3b5aa765d61d8327deb882cf99')\n        self.assertTrue(True)",
        "testrunner": "unittest"
    },
    {
        "doc": {
            "nuni": "Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\n",
            "wuni": "Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []",
            "wuwi": "Given two positive integers a and b, return the even numbers between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []",
            "nuwi": "Given two positive integers a and b, return the even numbers between a\nand b, in ascending order.\n",
            "changes": "TooMuch"
        },
        "id": 163,
        "signature": {
            "name": "generate_integers",
            "returns": "",
            "params": [
                "a",
                "b"
            ]
        },
        "language": "python",
        "parent": {
            "imports": [],
            "other_methods": []
        },
        "code": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "called_functions": "",
        "tests": "import unittest\nfrom func import *\n\nclass test_func(unittest.TestCase):\n    def test_generate_integers(self):\n        self.assertTrue(generate_integers(2, 10) == [2, 4, 6, 8])\n        self.assertTrue(generate_integers(10, 2) == [2, 4, 6, 8])\n        self.assertTrue(generate_integers(132, 2) == [2, 4, 6, 8])\n        self.assertTrue(generate_integers(17, 89) == [])\n        self.assertTrue(True)",
        "testrunner": "unittest"
    }
]